<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 有趣</title>
    <link>https://www.geekgame.site/categories/linux/</link>
    <description>Recent content in linux on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 07 Mar 2023 14:08:45 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设备硬件信息获取</title>
      <link>https://www.geekgame.site/post/linux/hardware/</link>
      <pubDate>Tue, 07 Mar 2023 14:08:45 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/linux/hardware/</guid>
      <description>
        
          
            背景 有时我们需要基于设备的硬件信息来生成唯一的序列号，本文从物理机和容器两个角度描述获取硬件信息的几种方式。
硬件信息 主要包括 cpu id, 主板序列号，
CPU ID CPU ID指的是CPU标识，是指CPU芯片上存储的唯一标识符。CPU ID通常由CPU制造商提供，并包含了CPU型号、制造日期、频率和其他信息。 CPU ID通常由一段16字节的数据组成，其中包括了CPU的型号、制造商、核心频率等信息。CPU ID可以用于识别CPU型号，以及确定CPU的性能和特性，也可以用于验证CPU的真伪。
主板序列号 主板序列号(board id)是一串唯一的数字和字母组合，用于标识计算机主板的身份和生产信息。每个主板都有一个唯一的序列号，类似于身份证号码或者汽车的车辆识别码（VIN）。主板序列号通常被存储在主板上的电子芯片中，并可以通过操作系统或者特定的软件程序来获取
磁盘序列号 磁盘序列号是一个磁盘驱动器的唯一标识符。它是由硬盘制造商预先配置的，通常由一串数字或字母组成。
宿主机下的获取方式 CPU ID 的获取方式 1[root ~]# dmidecode -t processor | grep ID 2	ID: E3 06 05 00 FF FB 8B 0F 3	ID: E3 06 05 00 FF FB 8B 0F 主板序列号 1[root ~]# dmidecode -t system | grep Serial 2	Serial Number: d0d39011-8a53-4046-a08b-aaca77b2e783 磁盘序列号 1[root ~]# lshw -class disk | grep serial 2 serial: ZA1CGDL0 注意： 虚拟硬盘是无法获取序列号的
          
          
        
      </description>
    </item>
    
    <item>
      <title>一文读懂iptables/netfilter附带实战</title>
      <link>https://www.geekgame.site/post/linux/iptables/</link>
      <pubDate>Thu, 13 Oct 2022 14:14:13 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/linux/iptables/</guid>
      <description>
        
          
            简介 iptables 是一个命令行工具，用来配置包过滤的规则的，而真正实现这些规则的程序位于内核层，叫做 netfilter, 可以讲iptables理解为netfilter的客户端，iptables 与 netfilter 共同组成了包过滤软件。 平常工作交流中 iptables 也经常代指该内核级防火墙，iptables 用于 ipv4, 相应的 ip6tables 用于 IPv6。
概念介绍 （图片引用）
hook iptables 在内核是对数据包做修改、转发、丢弃等操作的，而这些操作都是在一个个 hook 上完成的，hook 就是注册数据包处理函数的地方。hook点都是预定义好的，一共划分了五个hook点，分别为:
NF_IP_PRE_ROUTING: 接收到的包进入协议栈后由该hook上注册的函数来处理，这是在查询路由之前; NF_IP_LOCAL_IN: 查询路由后判断数据包是发往本机的，则首先进入该hook点，由该hook点上注册的函数来处理; NF_IP_FORWARD: 查询路由后判断数据包是不是本机的，则进入该hook点，由该hook点上注册的函数来处理; NF_IP_LOCAL_OUT: 本机发出的数据包首先进入该hook点，由该hook点上注册的函数来处理; NF_IP_POST_ROUTING: 数据包在发出本机之前，路由判断之后， 进入该hook点，由该hook点上注册的函数来处理; 表、链、规则 iptables 是由表(table)来组织的，而表又是由链(chain) 组成，链中包含了一个或者多个规则(rule)，规则既是对数据包处理的具体定义，所以总体来看 iptables -&amp;gt; table -&amp;gt; chain -&amp;gt; rule。
表 iptables 一共有五个table,分别为：
raw 用于配置数据包，提供一个让数据包不被系统跟踪的机制; filter 判断是否允许一个包通过; nat 用于 网络地址转换（例如：端口转发）; mangle 修改包的 IP 头，例如TTL，增加或减少包可以经过的跳数; security 用于 强制访问控制 网络规则; 链 链中包含了具体的规则，按照顺序进行匹配,内置了五个chain 与 hook 一一对应:
          
          
        
      </description>
    </item>
    
    <item>
      <title>Linux 常用命令</title>
      <link>https://www.geekgame.site/post/linux/command/command/</link>
      <pubDate>Tue, 11 Jan 2022 10:47:48 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/linux/command/command/</guid>
      <description>
        
          
            find find 多个条件 AND 使用多个条件查找，默认是 AND 操作
1$ find . -name &amp;#34;*.bash&amp;#34; -mtime +180 -size +2K -exec ls -l {} \; 在上面的命令中，我们告诉 find 搜索名称中带有字符串 .bash 的文件/目录，它们应该超过 180 天并且大小应该大于 2KB。
最后，我们使用 -exec 选项对 find 命令产生的结果执行 ls -l 命令。
find 多个条件 OR 让我们考虑一个场景，我们需要修改我们之前使用的示例并获取带有字符串 .bash 和 .txt 的文件。要满足此要求，请在 find 命令中使用 -o 选项来指示逻辑 OR 操作。 给出的是完整的命令
1 find . \( -name &amp;#34;*.bash&amp;#34; -o -name &amp;#34;*.txt&amp;#34; \) -mtime +180 -size +2k -exec ls -lh {} \; find 逻辑 非 查找列出过去 30 天内修改的所有文件并排除 .
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
