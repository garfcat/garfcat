<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>协议 on 有趣</title>
    <link>https://www.geekgame.site/categories/%E5%8D%8F%E8%AE%AE/</link>
    <description>Recent content in 协议 on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 11 May 2020 09:25:42 +0800</lastBuildDate>
    <atom:link href="https://www.geekgame.site/categories/%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP SYN flood 攻击以及解决方法</title>
      <link>https://www.geekgame.site/post/protocol/tcp_syn_flood/</link>
      <pubDate>Mon, 11 May 2020 09:25:42 +0800</pubDate>
      <guid>https://www.geekgame.site/post/protocol/tcp_syn_flood/</guid>
      <description>syn flood 攻击是一种拒绝服务攻击，主要有两种方法：&#xA;一种是只发 SYN 不回ACK ； 一种是在SYN包中欺骗透过欺骗来源IP，让SYN-ACK发送到假的IP地址，从而收不到ACK； 如下图所示： 由上可以看出SYN flood 攻击都是收不到ACK导致的。收不到ACK就服务完成连接建立，这些半连接会耗费大量资源，当资源耗尽，就会导致拒绝服务；&#xA;一般处理方式调整内核参数， 主要参数如下：&#xA;tcp_synack_retries : 如果收不到第三次握手的ack ，需要重试的次数，默认是为5， 设置为0 不进行重试，从而可以加快半连接的回收； tcp_max_syn_backlog : 半连接的上限； tcp_syncookies: 默认开启；它的原理是，在TCP服务器接收到TCP SYN包并返回TCP SYN + ACK包时，不分配一个专门的数据区，而是根据这个SYN包计算出一个cookie值。这个 cookie作为将要返回的SYN ACK包的初始序列号。当客户端返回一个ACK包时，根据包头信息计算cookie，与返回的确认序列号(初始序列号 + 1)进行对比，如果相同，则是一个正常连接，然后，分配资源，建立连接。 </description>
    </item>
    <item>
      <title>TCP timewait 过多怎么办</title>
      <link>https://www.geekgame.site/post/protocol/tcp_1/</link>
      <pubDate>Thu, 07 May 2020 09:53:51 +0800</pubDate>
      <guid>https://www.geekgame.site/post/protocol/tcp_1/</guid>
      <description>要处理timewait 过多的问题，首先应该清楚这个状态是由来，即需要了解TCP 状态迁移的过程；&#xA;TCP 三次握手四次挥手状态迁移 1 TCP A TCP B 2 3 1. CLOSED LISTEN 4 5 2. SYN-SENT --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;CTL=SYN&amp;gt; --&amp;gt; SYN-RECEIVED 6 7 3. ESTABLISHED &amp;lt;-- &amp;lt;SEQ=300&amp;gt;&amp;lt;ACK=101&amp;gt;&amp;lt;CTL=SYN,ACK&amp;gt; &amp;lt;-- SYN-RECEIVED 8 9 4. ESTABLISHED --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt; --&amp;gt; ESTABLISHED 10 11 5. ESTABLISHED --&amp;gt; &amp;lt;SEQ=101&amp;gt;&amp;lt;ACK=301&amp;gt;&amp;lt;CTL=ACK&amp;gt;&amp;lt;DATA&amp;gt; --&amp;gt; ESTABLISHED 一般的关闭流程如下所示：&#xA;1 TCP A TCP B 2 3 1. ESTABLISHED ESTABLISHED 4 5 2. (Close) 6 FIN-WAIT-1 --&amp;gt; &amp;lt;SEQ=100&amp;gt;&amp;lt;ACK=300&amp;gt;&amp;lt;CTL=FIN,ACK&amp;gt; --&amp;gt; CLOSE-WAIT 7 8 3.</description>
    </item>
    <item>
      <title>MQTT 基本概念</title>
      <link>https://www.geekgame.site/post/protocol/mqtt/</link>
      <pubDate>Wed, 15 May 2019 13:24:24 +0800</pubDate>
      <guid>https://www.geekgame.site/post/protocol/mqtt/</guid>
      <description>&lt;p&gt;MQTT(Message Queuing Telemetry Transport，消息队列遥测传输协议)是最初由IBM开发的一种基于发布/订阅模式的轻量级通信协议,工作在tcp/ip协议簇上。主要优势是&#xA;低开销、低带宽，在lot上应用较为广泛。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
