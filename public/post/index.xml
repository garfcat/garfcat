<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 有趣</title>
    <link>https://www.geekgame.site/post/</link>
    <description>Recent content in Posts on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 08 Jun 2021 16:18:40 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes 扩展</title>
      <link>https://www.geekgame.site/post/k8s/extensions/extend/</link>
      <pubDate>Tue, 08 Jun 2021 16:18:40 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/extensions/extend/</guid>
      <description>
        
          &lt;p&gt;Kubernetes 是Google开源的容器编排项目，是云原生时代最成功的项目之一，其本身也是高度可配置且可扩展的，这就可以让我们利用扩展开发出符合我们业务逻辑的软件，本文就其扩展展开讨论。&lt;/p&gt;
&lt;h1 id=&#34;kubernetes-扩展点&#34;&gt;Kubernetes 扩展点&lt;/h1&gt;
&lt;p&gt;Kubernetes 在官网给出了7个扩展点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubectl扩展: 以 kubectl- 开头的可执行文件，需要注意两点：
&lt;ul&gt;
&lt;li&gt;变量传递：所有环境变量也按原样传递给可执行文件；&lt;/li&gt;
&lt;li&gt;命令最长匹配：插件机制总是为给定的用户命令选择尽可能长的插件名称;&lt;/li&gt;
&lt;li&gt;影响范围： 只对本地环境造成影响；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API访问扩展：请求到达API服务时都会经过：认证、鉴权、准入控制这几个阶段，API访问扩展就是对这几个阶段进行扩展,使用户可以对请求执行身份认证、基于其内容阻止请求、编辑请求内容、处理删除操作等等。&lt;/li&gt;
&lt;li&gt;自定义资源：Kubernetes 内部有很多内置资源：Pods、Services、Deployments等等，这些资源有时满足不了我们的实际需求，此时我们可以定义满足业务需求的资源（CRD），自定义资源一般与自定义控制器结合使用。&lt;/li&gt;
&lt;li&gt;调度器扩展：Kubernetes 调度器负责决定 Pod 要放置到哪些节点上执行，我们可以通过实现调度器扩展来实现我们自己的调度策略。&lt;/li&gt;
&lt;li&gt;控制器扩展：一般与自定义资源结合使用，成为 &lt;strong&gt;Operator 模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网络插件：用来扩展 Pod 网络的插件。&lt;/li&gt;
&lt;li&gt;存储插件：用来扩展存储的插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;operator-模式&#34;&gt;Operator 模式&lt;/h1&gt;
&lt;p&gt;自定义资源和控制器组成了 Operator 模式。在该模式下可以让你自动化完成应用部署、管理。&lt;br&gt;
在 Kubernetes 中，Operator 是一个软件扩展，它利用自定义资源来管理应用程序及其组件。Operator 是 Kubernetes API 的客户端，用于控制自定义资源。Operator 是特定于应用程序的控制器，用于管理自定义资源的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Operator 可以自动化的事情包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按需部署应用&lt;/li&gt;
&lt;li&gt;获取/还原应用状态的备份&lt;/li&gt;
&lt;li&gt;处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置&lt;/li&gt;
&lt;li&gt;发布一个 service，要求不支持 Kubernetes API 的应用也能发现它&lt;/li&gt;
&lt;li&gt;模拟整个或部分集群中的故障以测试其稳定性&lt;/li&gt;
&lt;li&gt;在没有内部成员选举程序的情况下，为分布式应用选择首领角色&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;控制器-reconcile-loop&#34;&gt;控制器 Reconcile loop&lt;/h1&gt;
&lt;p&gt;控制器与资源关联，并监听资源的变化，如果资源发生变化，则会进入一个循环即调协循环(Reconcile loop)，伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;expectState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetExpectState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;actualState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetActualState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expectState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;actualState&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// do nothing
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// adjust the state to the expect state
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调协循环(Reconcile loop) 是通过事件驱动和定时执行来实现，不断对比实际状态与期望状态，并不断调整实际状态向实际状态靠拢。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;Kubernetes 提供了7个扩展点, 其中自定义资源和控制器组成了 Operator 模式，Operator 的工作原理,实际上是利用了 Kubernetes 的自定义 API 资源(CRD),来描述我们想要部署的应用;然后在自定义控制器里,根据自定义 API 对象的变化,来完成具体的部署和运维工作,其中控制的调协循环更是编排的核心。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://krvarma.medium.com/extending-kubernetes-part-1-custom-operator-b6745c42be4f&#34;&gt;Extending Kubernetes — Part 1 — Custom Operator&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#user-defined-types&#34;&gt;扩展 Kubernetes&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://trstringer.com/extending-k8s-custom-controllers/&#34;&gt;Extending Kubernetes - Create Controllers for Core and Custom Resources&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Kubebuilder 使用教程</title>
      <link>https://www.geekgame.site/post/k8s/extensions/kubebuilder/</link>
      <pubDate>Tue, 08 Jun 2021 16:18:16 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/extensions/kubebuilder/</guid>
      <description>
        
          &lt;h1 id=&#34;kubebuilder-是什么&#34;&gt;Kubebuilder 是什么&lt;/h1&gt;
&lt;p&gt;kubebuilder 是使用自定义资源（CRD）构建 Kubernetes API 的框架。Kubebuilder提高了开发人员在Go中快速构建和发布Kubernetes api的速度，降低了开发管理的复杂性。&lt;/p&gt;
&lt;h1 id=&#34;kubebuilder-如何使用&#34;&gt;Kubebuilder 如何使用&lt;/h1&gt;
&lt;p&gt;我们通过向 Kubernetes 集群添加一个自定义 Cluster 来了解 Kubebuilder 如何使用。
其主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个项目&lt;/li&gt;
&lt;li&gt;创建一个API&lt;/li&gt;
&lt;li&gt;定义CRD&lt;/li&gt;
&lt;li&gt;实现controller&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建目录ipes-cmp 并进入执行 go mod init ipes-cmp 来告诉 kubebuilder 和 Go module 的基本导入路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 kubebuilder init 命令，初始化一个新项目。示例如下。
kubebuilder init --domain ipes-cmp&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--domain&lt;/strong&gt;: 项目的域名&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建一个api&#34;&gt;创建一个API&lt;/h2&gt;
&lt;p&gt;运行下面的命令，创建一个新的 API（组/版本）为 “cluster/v1”，并在上面创建新的 Kind(CRD) “Cluster”。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;   kubebuilder create api --group cluster --version v1 --kind Cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目录结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;在 Create Resource [y/n] 和 Create Controller [y/n] 中按y，创建文件 api/v1/cluster_types.go ，
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;该文件中定义相关 API ，而针对于这一类型 (CRD) 的对账业务逻辑生成在 controller/cluster_controller.go 文件中。
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;├── Dockerfile
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;├── Makefile       # 这里定义了很多脚本命令，例如运行测试，开始执行等
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;├── PROJECT    # 这里是 kubebuilder 的一些元数据信息
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;├── api
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;│   └── v1
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;│       ├── cluster_types.go   #定义 Spec 和 Status
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;│       ├── groupversion_info.go  # 包含了关于 group-version 的一些元数据
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;│       └── zz_generated.deepcopy.go
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;├── bin
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;│   └── controller-gen
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;├── config
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;│   ├── crd   # 部署 crd 所需的 yaml, 自动生成, 只需要修改了 v1 中的 go 文件之后执行 make generate 即可
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;│   │   ├── kustomizeconfig.yaml
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;│   │   └── patches
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;│   │       ├── cainjection_in_clusters.yaml
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;│   │       └── webhook_in_clusters.yaml
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;│   ├── default     # 一些默认配置
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;│   │   ├── manager_auth_proxy_patch.yaml
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;│   │   └── manager_config_patch.yaml
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;│   ├── manager
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;│   │   ├── controller_manager_config.yaml
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;│   │   └── manager.yaml
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;│   ├── prometheus   # 监控指标数据采集配置
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;│   │   └── monitor.yaml
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;│   ├── rbac   # 部署所需的 rbac 授权 yaml
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;│   │   ├── auth_proxy_client_clusterrole.yaml
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;│   │   ├── auth_proxy_role.yaml
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;│   │   ├── auth_proxy_role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;│   │   ├── auth_proxy_service.yaml
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;│   │   ├── cluster_editor_role.yaml
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;│   │   ├── cluster_viewer_role.yaml
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;│   │   ├── leader_election_role.yaml
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;│   │   ├── leader_election_role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;│   │   ├── role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;│   │   └── service_account.yaml
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;│   └── samples  # 这里是 crd 示例文件，可以用来部署到集群当中
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;│       └── cluster_v1_cluster.yaml
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;├── controllers
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;│   ├── cluster_controller.go
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;│   └── suite_test.go
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;├── go.mod
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;├── go.sum
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;├── hack
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;│   └── boilerplate.go.txt
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;└── main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;定义crd&#34;&gt;定义CRD&lt;/h2&gt;
&lt;p&gt;修改 cluster_type.go 文件添加地域信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ClusterSpec defines the desired state of Cluster
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ClusterSpec&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Important: Run &amp;#34;make&amp;#34; to regenerate code after modifying this file
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Foo is an example field of Cluster. Edit cluster_types.go to remove/update
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;foo,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Region represents the region of the member cluster locate in.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// +optional
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Region&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;region,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完之后执行 make manifests generate ，可以生成对应的config/bases/cluster.ipes.io_clusters.yaml文件。可以看到spec信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;  spec:
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    description: ClusterSpec defines the desired state of Cluster
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    properties:
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;      foo:
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;        description: Foo is an example field of Cluster. Edit cluster_types.go
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;          to remove/update
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;        type: string
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;      region:
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;        description: Region represents the region of the member cluster locate
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;          in.
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;        type: string
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    type: object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;实现controller&#34;&gt;实现controller&lt;/h1&gt;
&lt;p&gt;controller的逻辑框架kubebuilder已经帮我们完成，我们只需要完成最核心的函数 &lt;em&gt;Reconcile&lt;/em&gt;即可；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;controllers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cluser_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ClusterReconciler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Reconcile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里我们获取cluster信息并打印&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ClusterReconciler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Reconcile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clusterv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TODO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// The resource may no longer exist, in which case we stop processing.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;apierrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Requeue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// your logic here
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ipes cluster status change&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;region&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;h3 id=&#34;部署crd资源&#34;&gt;部署CRD资源&lt;/h3&gt;
&lt;p&gt;我们在实现了controller 的核心逻辑之后， 需要先将CRD注册到集群中, 具体命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里make install ; 是执行了以下两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;make manifests  # 生成CRD资源&lt;/li&gt;
&lt;li&gt;bin/kustomize build config/crd | kubectl apply -f - #生成部署CRD， 并部署到集群中
如果集群不在本地， 可以分开执行这两步。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行-controller&#34;&gt;运行 controller&lt;/h3&gt;
&lt;p&gt;本地直接执行 make run 即可，我这里需要编译后，放到服务器上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜  ~ ./ipes-cmp
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;2021-06-08T19:22:38.187+0800	INFO	controller-runtime.metrics	metrics server is starting to listen	{&amp;#34;addr&amp;#34;: &amp;#34;:8080&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	setup	starting manager
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	controller-runtime.manager	starting metrics server	{&amp;#34;path&amp;#34;: &amp;#34;/metrics&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	controller-runtime.manager.controller.cluster	Starting EventSource	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;kind source: /, Kind=&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;2021-06-08T19:22:38.289+0800	INFO	controller-runtime.manager.controller.cluster	Starting Controller	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;2021-06-08T19:22:38.289+0800	INFO	controller-runtime.manager.controller.cluster	Starting workers	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;, &amp;#34;worker count&amp;#34;: 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加一个测试例子&#34;&gt;添加一个测试例子&lt;/h3&gt;
&lt;p&gt;创建一个测试的集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster.ipes.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add fields here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;beijing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;kubectl apply -f bj_cluster.yml # 部署测试集群
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到controller 输入日志，controller已经获取到关于cluster的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2021-06-08T19:35:49.562&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+0800&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;INFO	controllers.Cluster	ipes cluster status change	{&amp;#34;name&amp;#34;: &amp;#34;test-cluster&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;beijing&amp;#34;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;目前扩展 Kubernetes 的 API 的方式有创建 CRD、使用 Operator SDK 等方式，都需要写很多的样本文件（boilerplate），使用起来十分麻烦。为了能够更方便构建 Kubernetes API 和工具，就需要一款能够事半功倍的工具，与其他 Kubernetes API 扩展方案相比，kubebuilder 更加简单易用，并获得了社区的广泛支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.aliyun.com/article/719215&#34;&gt;深入解析 Kubebuilder：让编写 CRD 变得更简单&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://cloudnative.to/kubebuilder/quick-start.html&#34;&gt;Kubebuilder&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.bookstack.cn/read/kubernetes-handbook-201910/develop-kubebuilder.md&#34;&gt;Kubernetes中文指南/云原生应用架构实践手册(201910)&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Golang程序性能pprof使用介绍</title>
      <link>https://www.geekgame.site/post/language/golang/golang_performance/</link>
      <pubDate>Mon, 29 Mar 2021 20:30:20 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/golang_performance/</guid>
      <description>
        
          &lt;p&gt;对于Golang程序性能分析，pprof 可以说是一大利器，它是用来性能分析的工具，主要可以分析CPU使用情况、内存使用情况、阻塞情况、竞争互斥锁等性能问题。
整个分析主要分为三个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目中引入相关的包；&lt;/li&gt;
&lt;li&gt;编译程序运行并收集运行时的数据；&lt;/li&gt;
&lt;li&gt;分析相关数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;引入并收集数据&#34;&gt;引入并收集数据&lt;/h1&gt;
&lt;p&gt;Golang标准库中提供了两种引入方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;runtime/pprof: 将程序运行时的性能分析数据写入到文件中，然后可通过pprof可视化分析工具进行分析；支持使用标准测试包构建的性能分析基准测试；&lt;/li&gt;
&lt;li&gt;net/http/pporf: 通过HTTP Server的方式提供pprof可视化工具所需要的性能分析数据；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;runtimepprof&#34;&gt;runtime/pprof&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;支持基准测试&lt;/strong&gt;：以下命令在当前目录中运行基准测试并将 CPU 和内存配置文件写入 cpu.prof 和 mem.prof：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt; go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -cpuprofile cpu.prof -memprofile mem.prof -bench .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;独立程序分析&lt;/strong&gt;：需要将以下代码添加到主函数中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cpuprofile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cpuprofile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;write cpu profile `file`&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;memprofile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;memprofile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;write memory profile to `file`&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cpuprofile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cpuprofile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not create CPU profile: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pprof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;StartCPUProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not start CPU profile: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pprof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;StopCPUProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// ... rest of the program ...
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;memprofile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;memprofile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not create memory profile: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// get up-to-date statistics
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pprof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WriteHeapProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;            &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;could not write memory profile: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nethttppporf&#34;&gt;net/http/pporf&lt;/h2&gt;
&lt;p&gt;通过 import _ &amp;quot;net/http/pprof&amp;quot; 可以引入该包，如果你的程序没有http server,则需要添加类似以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:6060&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http server所有路径都是以 /debug/pprof/ 开头；本地访问 http://localhost:6060/debug/pprof 可以看到一个概览，展示的是pprof可以采集数据；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;/debug/pprof/
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;Types of profiles available:
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;Count	Profile
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;1	allocs              &lt;span class=&#34;c1&#34;&gt;## 内存分配情况的采样&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;0	block               &lt;span class=&#34;c1&#34;&gt;## 阻塞情况的采样&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;0	cmdline             &lt;span class=&#34;c1&#34;&gt;## 显示命令启动信息&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;7	goroutine           &lt;span class=&#34;c1&#34;&gt;## 当前所有goroutines的堆栈信息&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;1	heap                &lt;span class=&#34;c1&#34;&gt;## 堆上内存申请情况的采样&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;0	mutex               &lt;span class=&#34;c1&#34;&gt;## 锁竞争的采样信息&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;0	profile             &lt;span class=&#34;c1&#34;&gt;## CPU使用情况的采样&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;8	threadcreate        &lt;span class=&#34;c1&#34;&gt;## 系统线程创建的堆栈跟踪信息&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;0	trace               &lt;span class=&#34;c1&#34;&gt;## 程序运行跟踪信息&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;full goroutine stack dump
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;Profile Descriptions:
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;allocs: A sampling of all past memory allocations
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;block: Stack traces that led to blocking on synchronization primitives
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;cmdline: The &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; line invocation of the current program
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;goroutine: Stack traces of all current goroutines
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;heap: A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;mutex: Stack traces of holders of contended mutexes
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;profile: CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; to investigate the profile.
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;threadcreate: Stack traces that led to the creation of new OS threads
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;trace: A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; to investigate the trace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;p&gt;无论是 runtime/pprof 还是net/http/pporf 都是为收集程序运行时的采样数据，对于分析数据我们还要借助工具 go tool pprof， 以下以http server为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU分析
Demo如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Bug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10000000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Bug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:6060&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go tool pprof http://localhost:6060/debug/pprof/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行以上命令，可以通过http 获取到CPU的采样信息并通过go tool pprof进行分析，在进入交互式命令行后，可以输入top来查看占用CPU较高的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;(pprof) top
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;Showing nodes accounting for 19990ms, 99.65% of 20060ms total
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;Dropped 19 nodes (cum &amp;lt;= 100.30ms)
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;      flat  flat%   sum%        cum   cum%
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;   18740ms 93.42% 93.42%    19760ms 98.50%  main.Bug
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    1010ms  5.03% 98.45%     1010ms  5.03%  runtime.asyncPreempt
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;     240ms  1.20% 99.65%      240ms  1.20%  runtime.nanotime1
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;         0     0% 99.65%      250ms  1.25%  runtime.mstart
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;         0     0% 99.65%      250ms  1.25%  runtime.mstart1
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;         0     0% 99.65%      240ms  1.20%  runtime.nanotime (inline)
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;         0     0% 99.65%      250ms  1.25%  runtime.sysmon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;flat：当前函数上运行耗时；&lt;br&gt;
flat%：当前函数的运行耗时占 CPU 运行耗时比例；&lt;br&gt;
sum%： 前面每一行的 flat 占比总和；&lt;br&gt;
cum： 当前函数加上该函数调用函数的总耗时；&lt;br&gt;
cum%： 当前函数加上该函数调用函数的总耗时占用CPU运行耗时的比例；&lt;/p&gt;
&lt;p&gt;通过top 可以看到占用CPU较高的函数，然后可以通过 &lt;em&gt;list 函数名&lt;/em&gt; 命令来查看某个函数的更细致的分析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;(pprof) list Bug
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;Total: 20.06s
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;ROUTINE ======================== main.Bug in /Users/xiefei/repo/post/debug/main.go
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    18.74s     19.76s (flat, cum) 98.50% of Total
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;         .          .      6:	_ &amp;#34;net/http/pprof&amp;#34;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;         .          .      7:	&amp;#34;time&amp;#34;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;         .          .      8:)
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;         .          .      9:
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;         .          .     10:func Bug() {
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;         .      770ms     11:	for {
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    18.74s     18.98s     12:		for i := 0; i &amp;lt; 10000000000; i++ {
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;         .          .     13:		}
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;         .       10ms     14:		time.Sleep(1 * time.Second)
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;         .          .     15:	}
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;         .          .     16:}
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;         .          .     17:
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;         .          .     18:func main() {
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;         .          .     19:	go Bug()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由该命令可以看出 for 循环那段代码占用的CPU较高，从而定位问题；&lt;/p&gt;
&lt;p&gt;另外我们还可以通过web 命令查看将采样数据图形化展示出来；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/bug.png&#34; alt=&#34;web&#34;&gt;
图中的箭头代表的是函数的调用，箭头上的值代表的是该方法的采样值，这里是CPU耗时，框越大的函数CPU占用就越高，框内表示的就是
flat、flat%、cum、cum%.&lt;/p&gt;
&lt;p&gt;另外我们还可以通过以下命令获取Profile并在启动一个web服务在浏览器中进行分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go tool pprof -http=:8888 http://localhost:6060/debug/pprof/profile?second=10s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从浏览器中可以看到top、source、graph、火焰图等信息；
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/performance/web-pprof-top.png&#34; alt=&#34;top&#34;&gt;
top 与命令行top显示是基本一致;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/performance/web-pporf-source.png&#34; alt=&#34;source&#34;&gt;
source 与 命令行list 显示基本一致；
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/performance/graph.png&#34; alt=&#34;graph&#34;&gt;
graph 与命令web 显示一致；
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/performance/flame.png&#34; alt=&#34;火焰图&#34;&gt;
火焰图的Y轴表示函数调用栈。X轴表示该函数占用的CPU时间的百分比，越宽代表占用的CPU时间就越多。&lt;/p&gt;
&lt;h2 id=&#34;内存&#34;&gt;内存&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go tool pprof http://localhost:6060/debug/pprof/heap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go tool pprof -http=:8888 http://localhost:6060/debug/pprof/heap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内存分析通过以上命令获取相应的数据，分析方法与CPU基本一样，不过有几个术语需要解释以下：&lt;br&gt;
inuse_space:正在使用的分配空间;&lt;br&gt;
inuse_objects:正在使用的分配对象数;&lt;br&gt;
aloc_objects:累计的分配对象数;&lt;br&gt;
aloc_space:累计的分配空间;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;pprof 确实是分析Golang程序的一大利器，我们一般使用基本分为三步：
1.将代码加入到项目中
2. 收集相关数据
3.分析数据；在分析时我们也一般使用top list 或者火焰图来分析；&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/runtime/pprof&#34;&gt;runtime/pprof&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://pkg.go.dev/net/http/pprof&#34;&gt;net/http/pprf&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://coder.today/tech/2018-11-10_profiling-your-golang-app-in-3-steps/&#34;&gt;Profiling your Golang app in 3 steps&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>主流 nosql 数据库选型</title>
      <link>https://www.geekgame.site/post/nosql/select/</link>
      <pubDate>Sat, 13 Mar 2021 20:58:49 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/nosql/select/</guid>
      <description>
        
          &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/history-of-nosql.jpg&#34; alt=&#34;history of nosql&#34;&gt;
Nosql 目前主流说法已经从 no sql 变为现在的 not only sql,这个不仅仅是因为 nosql 数据库提供了类似 sql 的查询语言,更是因为它为我们解决复杂场景下业务需求和分布式数据处理提供了有效解决方法。&lt;br&gt;
目前nosql数据库已经有200多个(从 &lt;a href=&#34;https://hostingdata.co.uk/nosql-database/&#34;&gt;https://hostingdata.co.uk/nosql-database/&lt;/a&gt; 可以看到已经有225个)，但是我们目前常用的数据库有以下四类:
KV数据库、文档数据库、列式数据库、全文搜索引擎。本文就以redis、mongodb、hbase、ES为例说明这几种数据的区别以及各自的适用场景。&lt;/p&gt;
&lt;h1 id=&#34;redis&#34;&gt;Redis&lt;/h1&gt;
&lt;p&gt;以redis 为代表的键/值对存储数据库，可以允许你将键/值存储到数据库中，并将可以按照键读取数据。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;优点:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轻量且高性能；&lt;/li&gt;
&lt;li&gt;支持集群（主从集群，切片集群）；&lt;/li&gt;
&lt;li&gt;不仅支持简单的字符串键值对， 它还提供了一系列数据结构类型值，如list、hash、set、sorted set、bitmap、hyperloglog.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;缺点:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主要缺点是事务支持不完整：保证了 ACID 中的一致性（C）和隔离性（I），但并不保证原子性（A）和持久性（D）；&lt;/li&gt;
&lt;li&gt;集群使用Slot映射表来决定数据分布，规模有一定限制；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;主要场景&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓存： 其高性能最适合用来做缓存，这也是redis最常用的场景之一;&lt;/li&gt;
&lt;li&gt;分布式锁：redis 提供了 Redlock 算法,用来实现基于多个实例的分布式锁;&lt;/li&gt;
&lt;li&gt;消息队列：redis 通过list和stream来实现消息队列，数据不大的情况下redis不失为一个好的消息队列方案；&lt;/li&gt;
&lt;li&gt;排行榜/计数：redis提供了一些统计模式，常见的有聚合统计、排序统计、二值状态统计和基数统计；&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;mongodb&#34;&gt;Mongodb&lt;/h1&gt;
&lt;p&gt;MongoDB 是文档数据库，主要提供数据存储和管理服务。最大的特点就是free-schema,可以将存储任意数据，多种信息存储在一个文档中，而不像关系型数据库那样存储在不同的表中。目前最常用的文档格式是JSON.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;优点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灵活的查询语言；&lt;/li&gt;
&lt;li&gt;易于水平扩展，高可用复制集，可扩展分片集群；&lt;/li&gt;
&lt;li&gt;字段增加简单，可以存储复杂的数据格式；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;缺点或者限制&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于没有像关系型数据库的范式要求，所以数据可能会有冗余存储；&lt;/li&gt;
&lt;li&gt;每个文档大小限制为16MB;&lt;/li&gt;
&lt;li&gt;事务MVCC的旧数据保存在内存中，所以如果涉及大量文档的数据会带来性能问题，而且mongodb 也提供了默认清理时间transactionLifetimeLimitSeconds，指定多文档事务的生存期。超过此限制的事务将被视为已过期，并且将通过定期清理过程中止；&lt;/li&gt;
&lt;li&gt;虽然事务锁定了正在修改的文档，但是其他会话修改该文档并不会被block，而是要求终止该事务然后重试，这会造成浪费因为事务中的其他操作也会重新执行；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;适用场景&lt;/em&gt;
电商、游戏、物流、内容管理、社交、物联网、视频直播等领域都可以使用mongodb;&lt;/p&gt;
&lt;h1 id=&#34;hbase&#34;&gt;hbase&lt;/h1&gt;
&lt;p&gt;hbase是一种key/value分布式存储系统，仅能按照主键(row key)和主键的range来检索数据，属于列式数据库，是按照列来存储数据的；&lt;/p&gt;
&lt;p&gt;&lt;em&gt;优点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;海量数据存储： 一个表可以有上亿行数据，上百万列；&lt;/li&gt;
&lt;li&gt;准实时查询：1s内或者百毫秒内返回查询结果；&lt;/li&gt;
&lt;li&gt;横向扩展能力强；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;缺点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仅能按照主键(row key)和主键的range来检索数据，这样无法实现复杂的查询；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;适用场景&lt;/em&gt;&lt;br&gt;
主要解决&lt;strong&gt;海量数据&lt;/strong&gt;量场景下I/O较高的问题，可以存储海量数据，因此非常适合数据量极大，但是查询条件比较简单的场景；
比如： 交通GPS、物流（快递员轨迹）、金融（取款信息/消费信息）、电商（浏览日志信息）；&lt;/p&gt;
&lt;h1 id=&#34;es&#34;&gt;ES&lt;/h1&gt;
&lt;p&gt;ES 是分布式的文档存储，定位数据检索服务，是一个搜索服务。其主要通过倒排索引，建立从单词到文档的索引来实现全文搜索的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;优点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持全文搜索；&lt;/li&gt;
&lt;li&gt;自动建立索引，可支持复杂的查询；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;缺点&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;其他mapping(同关系数据库的字段)不可修改；&lt;/li&gt;
&lt;li&gt;写入性能相对不高，资源损耗较高；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;适用场景&lt;/em&gt;&lt;br&gt;
ES 主要是用来构建搜索服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监控信息、日志数据的检索；&lt;/li&gt;
&lt;li&gt;数据查询纬度比较多的场景，如婚恋网站、电商购物；&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;需要缓存服务时一般用redis;&lt;br&gt;
查询纬度较多时用es;&lt;br&gt;
数据结构多变且读写性能要求较高用mongodb;&lt;br&gt;
海量数据且查询比较单一用hbase;&lt;br&gt;
以上只是一般情况，针对自己的业务场景并根据各个Nosql的特点综合分析来确定用哪个Nosql.&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.knuthaugen.no/2010/03/a-brief-history-of-nosql.html&#34;&gt;A Brief History of NoSQL&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://searchdatamanagement.techtarget.com/definition/NoSQL-Not-Only-SQL&#34;&gt;NoSQL (Not Only SQL database)&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://redisbook.readthedocs.io/en/latest/feature/transaction.html#id12&#34;&gt;Redis设计与实现&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.dbta.com/Columns/MongoDB-Matters/Limitations-in-MongoDB-Transactions-127057.aspx&#34;&gt;Limitations in MongoDB Transactions&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>golang testing 使用教程</title>
      <link>https://www.geekgame.site/post/language/golang/test/</link>
      <pubDate>Sun, 27 Sep 2020 16:15:18 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/test/</guid>
      <description>
        
          &lt;p&gt;单测是提高代码质量的重要一环,在提交代码尤其是开源社区单测一般是必需要随代码一起提交的,下面我们来看一下Golang中是如何写单元测试的。
Go中提供了专门用来写单元测试的包 testing， 运行时只需要 go test  即可。
单元测试主要分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能测试（Test）&lt;/li&gt;
&lt;li&gt;性能测试（Benchmark）&lt;/li&gt;
&lt;li&gt;示例测试（Example）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试文件名称一般是源代码文件加上 &amp;quot;_test.go&amp;quot;, 比如 源代码文件为 add.go ，则测试文件名称为add_test.go。&lt;/p&gt;
&lt;p&gt;在展开单元测试之前先讲下,testing包中的输出函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;t.Log() :  正常日志输出;&lt;/li&gt;
&lt;li&gt;t.Errorf():  错误日志输出，当前函数继续运行;&lt;/li&gt;
&lt;li&gt;t.Fatalf():  错误日志输出，当前函数立刻退出；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能测试&#34;&gt;功能测试&lt;/h2&gt;
&lt;p&gt;测试函数有两点约定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数名必需以Test为前缀，如需要测试Add函数则名称应该为
TestAdd;&lt;/li&gt;
&lt;li&gt;函数参数必需为 t * testing.T;
完整的功能测试如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// add.go
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// add_tesg.go
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestAdd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Add(%d, %d) = %d, want %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在运行的时候可以使用 go test 执行该目录下的所有功能测试函数， 也可以通过 go test -run Xxxx 指定特定测试函数运行，-v 可以显示每个测试函数的执行结果， 如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜    go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -v
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; RUN   TestAdd
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;--- PASS: TestAdd &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.00s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;PASS
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;ok  	learn/golang/test	0.185s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;性能测试&#34;&gt;性能测试&lt;/h1&gt;
&lt;p&gt;性能测试函数有两点约定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数名必需以Benchmark为前缀，如需要测试Add函数则名称应该为
BenchmarkAdd;&lt;/li&gt;
&lt;li&gt;函数参数必需为 b * testing.B;
完成测试函数如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkRandInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在运行的时候可以执行如下命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go test -bench=.  ：执行该目录下的所有测试函数(包含功能测试和性能测试)；&lt;/li&gt;
&lt;li&gt;go test -bench=.  -run=^$  ：执行该目录下的性能测试函数；&lt;/li&gt;
&lt;li&gt;go test -bench=BenchmarkRandInt -run=^$: 执行性能测试函数BenchmarkRandInt；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;-bench: 只有有个该标志才会执行性能测试函数；
-run: 这个标志表示要执行哪些功能测试函数，默认是全部，^$ 表示空，即不执行功能测试函数；&lt;/p&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜    go test -bench=BenchmarkRandInt -run=^$
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;goos: darwin
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;goarch: amd64
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;pkg: learn/golang/test
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;BenchmarkRandInt-8   	70695550	        16.9 ns/op
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;PASS
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;ok  	learn/golang/test	1.956s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于测试结果的输出，重点字段解释如下：
BenchmarkRandInt-8 ： 说明执行的测试函数是BenchmarkRandInt， 8说明使用的最大P是8个；&lt;br&gt;
70695550： 执行的总次数；&lt;br&gt;
16.9 ns/op ： 单次平均耗时；&lt;br&gt;
另外如果执行测试函数前有一些耗时的操作，可以使用b.ResetTimer() 重置以下定时器；&lt;/p&gt;
&lt;h2 id=&#34;示例测试&#34;&gt;示例测试&lt;/h2&gt;
&lt;p&gt;示例测试函数提供了运行并验证的功能，既可以当作文档又可以用来测试；
示例测试有如下约定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数名必需以Example为前缀；&lt;/li&gt;
&lt;li&gt;通过注释 Output: 来说明正确的输出结果，，在运行测试时，go 会将示例函数的输出和 &amp;quot;Output:&amp;quot; 注释中的值做比较；&lt;/li&gt;
&lt;li&gt;如果输出的顺序不固定可以使用 &amp;quot;Unordered output:&amp;quot; 开头的注释；
完整测试如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ExamplePerm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Perm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Unordered output: 4
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 1
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 0
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;golang testing&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>TCP timewait 过多怎么办</title>
      <link>https://www.geekgame.site/post/protocol/tcp_1/</link>
      <pubDate>Thu, 07 May 2020 09:53:51 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/protocol/tcp_1/</guid>
      <description>
        
          &lt;p&gt;要处理timewait 过多的问题，首先应该清楚这个状态是由来，即需要了解TCP 状态迁移的过程；&lt;/p&gt;
&lt;h1 id=&#34;tcp-三次握手四次挥手状态迁移&#34;&gt;TCP 三次握手四次挥手状态迁移&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;     TCP A                                                TCP B
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;  1.  CLOSED                                               LISTEN
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  2.  SYN-SENT    --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;100&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;SYN&amp;gt;               --&amp;gt; SYN-RECEIVED
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;  3.  ESTABLISHED &amp;lt;-- &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;SYN,ACK&amp;gt;  &amp;lt;-- SYN-RECEIVED
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  4.  ESTABLISHED --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;       --&amp;gt; ESTABLISHED
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  5.  ESTABLISHED --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;&amp;lt;DATA&amp;gt; --&amp;gt; ESTABLISHED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般的关闭流程如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;      TCP A                                                TCP B
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;  1.  ESTABLISHED                                          ESTABLISHED
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  2.  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Close&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;      FIN-WAIT-1  --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;100&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FIN,ACK&amp;gt;  --&amp;gt; CLOSE-WAIT
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;  3.  FIN-WAIT-2  &amp;lt;-- &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;      &amp;lt;-- CLOSE-WAIT
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  4.                                                       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Close&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;      TIME-WAIT   &amp;lt;-- &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FIN,ACK&amp;gt;  &amp;lt;-- LAST-ACK
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;  5.  TIME-WAIT   --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;      --&amp;gt; CLOSED
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  6.  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; MSL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;      CLOSED   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两边同时关闭流程如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;      TCP A                                                TCP B
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;  1.  ESTABLISHED                                          ESTABLISHED
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  2.  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Close&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                              &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Close&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;      FIN-WAIT-1  --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;100&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FIN,ACK&amp;gt;  ... FIN-WAIT-1
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                  &amp;lt;-- &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;100&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FIN,ACK&amp;gt;  &amp;lt;--
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                  ... &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;100&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;300&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FIN,ACK&amp;gt;  --&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  3.  CLOSING     --&amp;gt; &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;      ... CLOSING
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                  &amp;lt;-- &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;      &amp;lt;--
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                  ... &amp;lt;&lt;span class=&#34;nv&#34;&gt;SEQ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;101&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;ACK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;301&amp;gt;&amp;lt;&lt;span class=&#34;nv&#34;&gt;CTL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ACK&amp;gt;      --&amp;gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;  4.  TIME-WAIT                                            TIME-WAIT
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; MSL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                              &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; MSL&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;      CLOSED                                               CLOSED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TIME-WAIT 是在主动关闭一方(一般是客户端)收到对端FIN包并回复最后一个ACK后进入的状态；随后等待2MSL时间后CLOSED.
MSL 是Maximum Segment Lifetime 报文最长生存时间，2MSL正好是报文一来一回的最大时间；TIME-WAIT的作用主要有两个：a) 确保 ack 可以被对端接收，如未收到可以返回FIN 包；b)确保对端发送的报文被接收或者超时被丢弃，防止未送达的报文对新连接造成影响；&lt;/p&gt;
&lt;p&gt;由此可以看出，这个状态是必不可少的，但是并发量比较大的机器上会造成无法新建连接，服务不可用的后果；因此我们要对TIME-WAIT过多的情况做一些调优；&lt;br&gt;
主要通过设置内核参数来调整：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tcp_tw_reuse&lt;/strong&gt;&lt;br&gt;
开启后在协议安全的情况下可以复用TIME-WAIT socket, 这里的协议安全是指两端都开启 timestamps；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tcp_tw_recyle(不建议开启)&lt;br&gt;
开启后（也是需要开启timestamp）对TIME-WAIT socket 快速回收, 但是不建议开启，因为开启后可能会导致服务端连接失败；
具体原因如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种机制在 客户端-服务器 一对一的时候，没有任何问题，但是当服务器在负载均衡器后面时，由于负载均衡器不会修改包内部的timestamp值，而互联网上的机器又不可能保持时间的一致性，再加上负载均衡是会重复多次使用同一个tcp端口向内部服务器发起连接的，就会导致什么情况呢：&lt;br&gt;
负载均衡通过某个端口向内部的某台服务器发起连接，源地址为负载均衡的内部地址——同一ip
假如恰巧先后两次连接源端口相同，这台服务器先后收到两个包，第一个包的timestamp被服务器保存着，第二个包又来了，一对比，发现第二个包的timestamp比第一个还老——客户端时间不一致
服务器基于PAWS，判断第二个包是重复报文，丢弃之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而且在最新的内核中已经删除了tcp_tw_recycle， 删除记录的commit 如下所示：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;  commit 4396e46187ca5070219b81773c4e65088dac50cc
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;  Author: Soheil Hassas Yeganeh &amp;lt;soheil@google.com&amp;gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;  Date:   Wed Mar &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; 16:30:46 &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; -0400
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;      tcp: remove tcp_tw_recycle
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;      The tcp_tw_recycle was already broken &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; connections
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;      behind NAT, since the per-destination timestamp is not
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;      monotonically increasing &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; multiple machines behind
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;      a single destination address.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;tcp_max_tw_buckets&lt;br&gt;
这个参数是控制TIME_WAIT的并发数量。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;完整状态迁移图如下&#34;&gt;完整状态迁移图如下&lt;/h1&gt;
&lt;p&gt;以下状态图来自于 &lt;a href=&#34;http://www.rfc-editor.org/rfc/rfc793.txt&#34;&gt;rfc793  TRANSMISSION CONTROL PROTOCOL&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;                               
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                              +---------+ ---------&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;     active OPEN  
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  CLOSED &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;            &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;   -----------  
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                              +---------+&amp;lt;---------&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  create TCB  
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     ^              &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt; snd SYN    
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;                   passive OPEN &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   CLOSE        &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;          
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                   ------------ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ----------       &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;        
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                    create TCB  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; delete TCB         &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;      
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                                V     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                      &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                              +---------+            CLOSE    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  LISTEN &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;          ---------- &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                              +---------+          delete TCB &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                   rcv SYN      &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     SEND              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;                  -----------   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    -------            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     V  
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt; +---------+      snd SYN,ACK  /       &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  snd SYN          +---------+
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&amp;lt;-----------------           ------------------&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   SYN   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                    rcv SYN                     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   SYN   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   RCVD  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&amp;lt;-----------------------------------------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   SENT  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                    snd ACK                     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;------------------           -------------------&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt; +---------+   rcv ACK of SYN  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;      /  rcv SYN,ACK       +---------+
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;           --------------   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   -----------                  
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                  x         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     snd ACK                    
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                            V     V                                
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  CLOSE                   +---------+                              
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; -------                  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  ESTAB  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                              
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; snd FIN                  +---------+                              
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                   CLOSE    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    rcv FIN                     
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;   V                  -------   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    -------                     
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt; +---------+          snd FIN  /       &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  snd ACK          +---------+
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  FIN    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&amp;lt;-----------------           ------------------&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  CLOSE  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; WAIT-1  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;------------------                              &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   WAIT  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt; +---------+          rcv FIN  &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;                           +---------+
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; rcv ACK of FIN   -------   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                            CLOSE  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; --------------   snd ACK   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                           ------- &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;   V        x                   V                           snd FIN V  
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt; +---------+                  +---------+                   +---------+
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;FINWAIT-2&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; CLOSING &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; LAST-ACK&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt; +---------+                  +---------+                   +---------+
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                rcv ACK of FIN &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;                 rcv ACK of FIN &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  rcv FIN       -------------- &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;Timeout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2MSL -------------- &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  -------              x       V    ------------        x       V  
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;    &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;snd ACK                 +---------+delete TCB         +---------+
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;     ------------------------&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;TIME WAIT&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;------------------&amp;gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; CLOSED  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;                              +---------+                   +---------+
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux&#34;&gt;Coping with the TCP TIME-WAIT state on busy Linux servers
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://saview.wordpress.com/2011/09/27/tcp_tw_recycle%E5%92%8Cnat%E9%80%A0%E6%88%90syn_ack%E9%97%AE%E9%A2%98/&#34;&gt;tcp_tw_recycle和NAT造成SYN_ACK问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

        
      </description>
    </item>
    
    <item>
      <title>kubernetes 架构</title>
      <link>https://www.geekgame.site/post/k8s/k8s/</link>
      <pubDate>Thu, 31 Oct 2019 15:26:32 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/k8s/</guid>
      <description>
        
          &lt;h1 id=&#34;什么是-kubernetes&#34;&gt;什么是 Kubernetes&lt;/h1&gt;
&lt;p&gt;Kubernetes(简称K8s) 是由 Google 在2014年开源的容器编排与调度管理框架，主要是为用户提供一个具有普遍意义的容器编排工具。该项目是Google内部大规模集群管理系统-Borg的一个开源版本，目前是由CNCF(Cloud Native Computing Foundation)托管项目。
Kubernetes 的主要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可扩展：Kubernetes 是高度可配置且可扩展的。&lt;/li&gt;
&lt;li&gt;可移植：Kubernetes 不限于特定平台，可以在各种公共或者私有云平台上运行。&lt;/li&gt;
&lt;li&gt;自动化：Kubernetes 是一个高度自动化的平台：可自动部署/回滚、自我修复、自动扩缩容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;kubernetes-架构&#34;&gt;Kubernetes 架构&lt;/h1&gt;
&lt;p&gt;K8s 遵循服务器/客户端(C/S)架构,分为两部分master和node，其中master是服务端，是控制节点主要控制和管理整个K8s集群;node是客户端,是工作节点，主要处理来自于master的任务。K8s可以设置多master来实现高可用，但是默认情况下单个master 就可以完成所有的工作。&lt;br&gt;
master包含的组件有：kube-apiserver, etcd, kube-controller-manager, kube-scheduler, cloud-controller-manager; &lt;br&gt;
node 包含的组件有: kubelet, kube-proxy;&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/Kubernetes-101-Architecture-Diagram-768x555.jpeg&#34; alt=&#34;带有两个Worker nodes和一个master的K8s架构图&#34;&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;master-组件&#34;&gt;master 组件&lt;/h2&gt;
&lt;p&gt;kube-apiserver: 提供集群HTTP REST API, 是集群控制的唯一入口,提供访问控制、注册、信息存储功能, 同时也是集群内部模块之间数据交换的枢纽。 &lt;br&gt;
etcd:  兼具一致性和高可用性的键值数据库,保存 K8s 所有集群数据;&lt;br&gt;
kube-scheduler:  对K8s中的Pod资源进行监控调度，为Pod选择合适的工作节点； &lt;br&gt;
kube-controller-manager: K8s实现自动化的关键组件，是集群中所有资源的自动化控制中心；&lt;br&gt;
cloud-controller-manager: 云控制器管理器是指嵌入特定云的控制逻辑的控制平面组件,使得 K8s 可以直接利用云平台实现持久化卷、负载均衡、网络路由、DNS 解析以及横向扩展等功能。&lt;/p&gt;
&lt;h2 id=&#34;node-组件&#34;&gt;node 组件&lt;/h2&gt;
&lt;p&gt;kubelet: 负责与master节点通信，处理master下发的任务，管理节点上容器的创建、停止与删除等; &lt;br&gt;
kube-proxy: 负责K8s集群服务的通信以及负载均衡；&lt;/p&gt;
&lt;h1 id=&#34;数据流转&#34;&gt;数据流转&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/k8s_data.png&#34; alt=&#34;K8s 数据流转&#34;&gt;
我们以 ReplicaSet 为例，讲述一下K8s的数据流转：&lt;br&gt;
0. 在集群组件一启动 kube-scheduler，kube-controller-manager，kubelet就会通过list-watch机制监听自己关心的事件；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;API作为集群入口，接收命令请求；&lt;/li&gt;
&lt;li&gt;API 与 ETCD交互，持久化 ReplicaSet;&lt;/li&gt;
&lt;li&gt;Etcd将 ReplicaSet 的创建事件发送给API;&lt;/li&gt;
&lt;li&gt;API 将 ReplicaSet 的创建事件发送给正在监听的 kube-controller-manager;&lt;/li&gt;
&lt;li&gt;kube-controller-manager 接收事件并创建Pod 发送给 API；&lt;/li&gt;
&lt;li&gt;API 与 etcd 交互持久化Pod;&lt;/li&gt;
&lt;li&gt;etcd 将Pod创建事件发送给 API；&lt;/li&gt;
&lt;li&gt;API 将Pod创建事件发送给 kube-scheduler;&lt;/li&gt;
&lt;li&gt;kube-scheduler 接收Pod事件并为Pod 选择合适的节点，并将更新信息发送给API;&lt;/li&gt;
&lt;li&gt;API 与 etcd 交互更新Pod;&lt;/li&gt;
&lt;li&gt;etcd 将Pod更新事件发送给 API；&lt;/li&gt;
&lt;li&gt;API 将Pod信息发送给 Kubelet;&lt;/li&gt;
&lt;li&gt;Kubelet 接收到 Pod, 真正去创建Pod；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是关于K8s架构以及数据流转的介绍。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aquasec.com/cloud-native-academy/kubernetes-101/kubernetes-architecture/&#34;&gt;Kubernetes Architecture&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;INTRODUCTION TO KUBERNETES ARCHITECTURE&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/services-networking/service/&#34;&gt;服务&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://dockone.io/article/4884&#34;&gt;Kubernetes的三种外部访问方式：NodePort、LoadBalancer 和 Ingress&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;&#34;&gt;极客时间&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>golang 协程调度原理</title>
      <link>https://www.geekgame.site/post/language/golang/sched/</link>
      <pubDate>Sun, 11 Aug 2019 10:23:01 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/sched/</guid>
      <description>
        
          &lt;p&gt;Go语言 最大的特点是提供简单易用的并发编程,这个并发的执行单元就是goroutine, 这个goroutine 是运行在用户态,并由GO自身来调度。调度器来决定谁来使用CPU资源，谁该让出CPU资源。
本文就来深入探讨一下Go的调度原理。&lt;/p&gt;
&lt;h1 id=&#34;gmp调度模型&#34;&gt;GMP调度模型&lt;/h1&gt;
&lt;p&gt;Go采用的是GMP调度模型。&lt;/p&gt;
&lt;h2 id=&#34;核心概念&#34;&gt;核心概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;G ：即Goroutine ,使用关键字 go 即可创建一个协程来处理用户程序，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//创建协程来执行函数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;M ：Machine 系统抽象的线程，代表真正的机器资源，目前最多10000，超过这个数量会panic.&lt;/li&gt;
&lt;li&gt;P ：Process,虚拟处理器，代表goroutine的上下文，用于关联G和M；P的数量可以通过GOMAXPROCS设置，默认为CPU核数；&lt;/li&gt;
&lt;li&gt;本地队列（local queue）: 每个P关联有一个协程队列，该队列就是P的本地队列，新生成的协程放在该队列中，当该队列达到最大数量时，会将该队列的一般协程存入到全局队列中；&lt;/li&gt;
&lt;li&gt;全局队列（global queue）: 当本地队列达到最大数量时，多余的协程就会存在全局队列中；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调度原理&#34;&gt;调度原理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;     +-------------------- sysmon ---------------//------+ 
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                             |                                                   |
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                             |                                                   |
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                +---+      +---+-------+                   +--------+          +---+---+
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; go func() ---&amp;gt; | G | ---&amp;gt; | P | local | &amp;lt;=== balance ===&amp;gt; | global | &amp;lt;--//--- | P | M |
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;                +---+      +---+-------+                   +--------+          +---+---+
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                             |                                 |                 | 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                             |      +---+                      |                 |
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                             +----&amp;gt; | M | &amp;lt;--- findrunnable ---+--- steal &amp;lt;--//--+
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                                    +---+ 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                                      |
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                                    mstart
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                                      |
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;               +--- execute &amp;lt;----- schedule 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;               |                      |   
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;               |                      |
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;               +--&amp;gt; G.fn --&amp;gt; goexit --+ 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上图(来自雨痕GO源码阅读)我们可以看到在新建G时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当使用go 关键字执行函数时，会创建(首先查看P的freelist是否可以复用G，如果不能则新建)一个G(goroutine);&lt;/li&gt;
&lt;li&gt;新创建的G，并不会添加到本地队列，而是添加到P关联的runnext中(runnext是一个指针变量，用来存放G的地址),runnext原来的G被放到本地队列中;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2.1 如果本地队列未满（最大256），则放置到队尾；&lt;/li&gt;
&lt;li&gt;2.2 如果本地队列已满，则将本地队列的一半数量的G和runnext中原来的G存放到全局队列中；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;唤醒或新建M来执行任务。&lt;/li&gt;
&lt;li&gt;进入调度循环&lt;/li&gt;
&lt;li&gt;尽力获取可执行的G，并执行&lt;/li&gt;
&lt;li&gt;清理现场并且重新进入调度循环&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/gmp_pic.png&#34; alt=&#34;调度原理&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行时调度&#34;&gt;运行时调度&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;为公平起见，有1／61的机会首先从全局队列获取到G,如果获取到则执行G;&lt;/li&gt;
&lt;li&gt;如果没有机会从全局队列获取或者没有获取到G，则从P关联的runnext或者本地队列获取： &lt;br&gt;
2.1 如果P的runnext有G，则执行该G；
2.2 如果P的runnext没有G，则从本地队列中获取G；&lt;/li&gt;
&lt;li&gt;如果第二步没有获取到，则执行以下步骤获取：&lt;br&gt;
3.1 从关联P中获取，步骤同2，若获取到返回;&lt;br&gt;
3.2 从全局队列中获取，若获取到返回;&lt;br&gt;
3.3 调用 netpoll()取异步调用结束的G，该调用为非阻塞调用,若获取到则返回一个G，剩余的G放入到全局队列中；&lt;br&gt;
3.4 从其他P中steal一半的G到本地队列,若获取到则返回；&lt;br&gt;
3.5 如果处于垃圾回收标记阶段，则执行垃圾回收操作；&lt;br&gt;
3.6 再次从全局队列中获取，若获取到返回;&lt;br&gt;
3.7 调用 netpoll()取异步调用结束的G，该调用为阻塞调用,若获取到则返回一个G，剩余的G放入到全局队列中；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;协程的状态&#34;&gt;协程的状态&lt;/h3&gt;
&lt;p&gt;在go1.12.5/src/runtime/runtime2.go：15 定义有如下几个状态&lt;br&gt;
_Gidle: 值（0） 刚刚被创建，还没有初始化；&lt;br&gt;
_Grunnable： 值（1） 已经在运行队列中，只是此时没有执行用户代码,未分配栈；&lt;br&gt;
_Grunning：值（2）在执行用户代码，已经不在运行队列中，分配了M和P;&lt;br&gt;
_Gsyscall： 值（3）当前goroutine正在执行系统调用，已经不再运行队列中，分配了M;&lt;br&gt;
_Gwaiting： 值（4） 在运行时被阻塞，并没有执行用户代码，此刻的goroutine会被记录到某处（例如channel等待队列）&lt;br&gt;
_Gmoribund_unused: 值（5） 当前并未使用，但是已经在gdb中进行了硬编码；&lt;br&gt;
_Gdead： 值（6） 当前goroutine没有被使用，可能刚刚退出或者刚刚被初始化，并没有执行用户代码；&lt;br&gt;
_Genqueue_unused： 值（7） 当前并未使用；&lt;br&gt;
_Gcopystack：值（8）正在复制堆栈，并未执行用户代码，也没有在运行队列中； &lt;br&gt;
状态转换图(引自 &lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;goroutine调度&lt;/a&gt;)如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;                                                     +------------+
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                                      ready           |            |
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                                  +------------------ |  _Gwaiting |
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                                  |                   |            |
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;                                  |                   +------------+
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;                                  |                         ^ park_m
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                                  V                         | 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;  +------------+            +------------+  execute   +------------+            +------------+    
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  |            |  newproc   |            | ---------&amp;gt; |            |   goexit   |            |
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  |  _Gidle    | ---------&amp;gt; | _Grunnable |  yield     | _Grunning  | ---------&amp;gt; |   _Gdead   |      
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  |            |            |            | &amp;lt;--------- |            |            |            |
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;  +------------+            +-----^------+            +------------+            +------------+
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                                  |         entersyscall |      ^ 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;                                  |                      V      | existsyscall
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;                                  |                   +------------+
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;                                  |   existsyscall    |            |
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;                                  +------------------ |  _Gsyscall |
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;                                                      |            |
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;                                                      +------------+
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;p的状态&#34;&gt;P的状态&lt;/h3&gt;
&lt;p&gt;_Pidle: 空闲状态，未与M绑定&lt;br&gt;
_Prunning: 正在运行，已经与M绑定,M 正在执行P中G；&lt;br&gt;
_Psyscall: 正在执行的G处于系统调用中；&lt;br&gt;
_Pgcstop： runtime正在gc;&lt;br&gt;
_Pdead: 当前P已经不再使用；&lt;/p&gt;
&lt;p&gt;状态转换图(引自 &lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;goroutine调度&lt;/a&gt;)如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;                                            acquirep(p)        
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                          不需要使用的P       P和M绑定的时候       进入系统调用       procresize()
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;new(p)  -----+        +---------------+     +-----------+     +------------+    +----------+
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;            |         |               |     |           |     |            |    |          |
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;            |   +------------+    +---v--------+    +---v--------+    +----v-------+    +--v---------+
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;            +--&amp;gt;|  _Pgcstop  |    |    _Pidle  |    |  _Prunning |    |  _Psyscall |    |   _Pdead   |
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                +------^-----+    +--------^---+    +--------^---+    +------------+    +------------+
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                       |            |     |            |     |            |
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                       +------------+     +------------+     +------------+
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                           GC结束            releasep()        退出系统调用
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                                            P和M解绑  
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;抢占&#34;&gt;抢占&lt;/h3&gt;
&lt;p&gt;在golang程序启动时，会创建一个M（并没有关联P）来执行监控函数即sysmon,该函数就是用来完成抢占的；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该函数每次执行之间都会休眠一定的时间，休眠时间计算规则与每次是否抢占成功有关系：&lt;br&gt;
1.1 如果连续未抢占成功的次数小于等于50，则每次休眠20us;&lt;br&gt;
1.2 如果连续未抢占成功的次数大于50，则每次休眠次数翻倍；&lt;br&gt;
1.3 最大休眠时间不得超过10ms;&lt;/li&gt;
&lt;li&gt;遍历所有的P，查看P的状态：&lt;br&gt;
2.1 如果状态为_Psyscall(处于系统调用中)且执行时间已经超过了一个sysmon时间（最少20us）,则进行抢占；&lt;br&gt;
2.2 如果状态为_Prunning且执行时间已经超过了forcePreemptNS(10ms),则进行抢占；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;阻塞唤醒&#34;&gt;阻塞/唤醒&lt;/h3&gt;
&lt;p&gt;channel阻塞...&lt;br&gt;
系统阻塞...&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/20991&#34;&gt;https://studygolang.com/articles/20991&lt;/a&gt;
&lt;a href=&#34;https://studygolang.com/articles/11627&#34;&gt;https://studygolang.com/articles/11627&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/Oos-aW1_khTO084v0jPlIA&#34;&gt;https://mp.weixin.qq.com/s/Oos-aW1_khTO084v0jPlIA&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/u010853261/article/details/84790392&#34;&gt;https://blog.csdn.net/u010853261/article/details/84790392&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;go夜读 golang 调度&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>通过 hello world 寻找 golang 启动过程</title>
      <link>https://www.geekgame.site/post/language/golang/start/</link>
      <pubDate>Thu, 20 Jun 2019 22:51:54 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/start/</guid>
      <description>
        
          &lt;p&gt;知其然，也要知其所以然，从今天开始研究一下golang的底层实现，首先从其启动开始；&lt;/p&gt;
&lt;h3 id=&#34;找到启动点&#34;&gt;找到启动点&lt;/h3&gt;
&lt;h5 id=&#34;1-写一个hello-world&#34;&gt;1. 写一个hello world.&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;2编译后使用gdb找到entry-point&#34;&gt;2.编译后使用gdb找到entry point&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ gdb hello
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt; .....
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;        file &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; mach-o-x86-64.
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;	Entry point: 0x1052720
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	0x0000000001001000 - 0x0000000001093074 is .text
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	0x0000000001093080 - 0x00000000010e19cd is __TEXT.__rodata
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	0x00000000010e19e0 - 0x00000000010e1ae2 is __TEXT.__symbol_stub1
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	0x00000000010e1b00 - 0x00000000010e2764 is __TEXT.__typelink
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	0x00000000010e2768 - 0x00000000010e27d0 is __TEXT.__itablink
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;	0x00000000010e27d0 - 0x00000000010e27d0 is __TEXT.__gosymtab
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	0x00000000010e27e0 - 0x000000000115c6ff is __TEXT.__gopclntab
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	0x000000000115d000 - 0x000000000115d158 is __DATA.__nl_symbol_ptr
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;	0x000000000115d160 - 0x0000000001169c9c is __DATA.__noptrdata
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;	0x0000000001169ca0 - 0x0000000001170610 is .data
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;	0x0000000001170620 - 0x000000000118be50 is .bss
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;	0x000000000118be60 - 0x000000000118e418 is __DATA.__noptrbss
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; info symbol 0x1052720
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;_rt0_amd64_darwin in section .text
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以从entry point 找到入口函数 _rt0_amd64_darwin，可以在源码中搜索一下函数名称,定位函数位置
runtime/rt0_darwin_amd64.s:7，具体如下所示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;TEXT _rt0_amd64_darwin&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,NOSPLIT,&lt;span class=&#34;nv&#34;&gt;$-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	JMP	_rt0_amd64&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该函数跳转到 _rt0_amd64, _rt0_amd64是一段针对amd64系统的公共启动代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;TEXT _rt0_amd64&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,NOSPLIT,&lt;span class=&#34;nv&#34;&gt;$-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	MOVQ	0&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, DI	// argc
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;	LEAQ	8&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SP&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, SI	// argv
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	JMP	runtime·rt0_go&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 MOVQ 用来操作数据，而LEAQ 用来操作地址，所以
MOVQ	0(SP), DI 是将argc 放到DI寄存器&lt;br&gt;
LEAQ	8(SP), SI 是将 argv 的地址放到SI寄存器
然后跳转到runtime·rt0_go(SB）(go1.12.5/src/runtime/asm_amd64.s:87)&lt;/p&gt;
&lt;p&gt;接下来的流程用下图表示:
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/start.png&#34; alt=&#34;初始化流程&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;参数设置&#34;&gt;参数设置&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TEXT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;rt0_go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NOSPLIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;arguments&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;forward&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;an&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;even&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;stack&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;／／将&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;和&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;复制到指定寄存器中&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;SI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;SUBQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;auto&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sp&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;字节对齐&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;ANDQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;复制到&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;复制到&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;g0-初始化&#34;&gt;g0 初始化&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;istack&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;given&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;operating&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;stack.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_cgo_init&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;may&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;stackguard.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;定义在&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;go1.12.5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;proc.go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;81&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g0.stackguard0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;rsp-64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g0.stackguard1&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;g0.stackguard0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g0.stack.lo&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;g0.stackguard0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;g0.stack.hi&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;rsp&lt;/span&gt; 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;$runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;g0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;(-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;g_stackguard0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;g_stackguard1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;g_stack&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;stack_lo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;g_stack&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;stack_hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置g0的栈信息，设置了栈的地址开始与结束位置，分配大约64k空间。&lt;/p&gt;
&lt;h5 id=&#34;cgo_init&#34;&gt;cgo_init&lt;/h5&gt;
&lt;p&gt;判断是否存在 _cgo_init ,如果有就执行，执行完之后重新设置g0的栈地址&lt;/p&gt;
&lt;h4 id=&#34;tls&#34;&gt;tls&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#ifdef GOOS_plan9
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;skip&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;TLS&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;setup&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Plan&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;JMP&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ok&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#endif
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#ifdef GOOS_solaris
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;skip&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;TLS&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;setup&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Solaris&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;JMP&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ok&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#endif
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#ifdef GOOS_darwin
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;skip&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;TLS&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;setup&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Darwin&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;JMP&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ok&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#endif
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;m0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;m_tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;DI&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;settls&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;位于&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;go1.12.5&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;sys_linux_amd64.s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;606&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;CALL&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;settls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;	&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;store&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;through&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;sure&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;works&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;get_tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;$0x123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;m0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;m_tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;CMPQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;$0x123&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;JEQ&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;CALL&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;abort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在plan 9, solaris ,darwin 上都直接跳过tls的设置。&lt;/p&gt;
&lt;h4 id=&#34;runtimeargs&#34;&gt;runtime.args&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVL&lt;/span&gt;	&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argc&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVL&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;		&lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;argv&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;CALL&lt;/span&gt;	&lt;span class=&#34;no&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;runtime.args 位于 go1.12.5/src/runtime/runtime1.go:60
主要作用是读取参数以及获取环境变量；&lt;/p&gt;
&lt;h4 id=&#34;runtimeosinit&#34;&gt;runtime.osinit&lt;/h4&gt;
&lt;p&gt;主要设置cpu 数量&lt;/p&gt;
&lt;h3 id=&#34;runtimeschedinit&#34;&gt;runtime.schedinit&lt;/h3&gt;
&lt;p&gt;位于 go1.12.5/src/runtime/proc.go:526
主要作用 初始化堆栈, 参数，gc , sched。&lt;/p&gt;
&lt;p&gt;接下来主要是创建一个goroutine,然后放到队列中，启动mstart 进行调度 运行第一个goroutine（runtime.main）&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>golang 栈结构</title>
      <link>https://www.geekgame.site/post/language/golang/plan9/</link>
      <pubDate>Sat, 15 Jun 2019 16:41:11 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/plan9/</guid>
      <description>
        
          &lt;h1 id=&#34;程序组成&#34;&gt;程序组成&lt;/h1&gt;
&lt;p&gt;程序由代码和数据组成，数据又有静态与动态之分；&lt;br&gt;
动态数据：存放在堆区和栈区；&lt;br&gt;
静态数据：静态只读数据可以放在代码区，也可以放在特定的只读数据区；&lt;br&gt;
可读写的已初始化的静态数据放在数据区，可读写的未初始化的静态数据放在bss区；&lt;/p&gt;
&lt;h1 id=&#34;寄存器&#34;&gt;寄存器&lt;/h1&gt;
&lt;h2 id=&#34;伪寄存器&#34;&gt;伪寄存器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FP(Frame pointer): 表示参数以及返回值的基地址；
通过 SYMBOL+/-ffset(FP)&lt;/li&gt;
&lt;li&gt;PC(Program counter): 跳转寄存器，存储下一条指令地址；&lt;/li&gt;
&lt;li&gt;SB(Static base pointer): 全局静态起始地址.&lt;/li&gt;
&lt;li&gt;SP(Stack pointer): 表示本地变量的起始地址；&lt;br&gt;
使用方式 symbol + offset(SP), 例如第一个变量 local0 + (0)SP , local0 只是定义一个符号，类似于 local0 := xxxx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个四个伪寄存器在golang 汇编中经常被用到，尤其是SB和FP；&lt;br&gt;
SB 全局静态起始地址, foo(SB)表示foo在内存中的地址。这个语法有两个修饰符&amp;lt;&amp;gt; 和 +N，其中N是一个整数。 foo&amp;lt;&amp;gt;(SB)表示foo是一个私有元素只能在
当前文件中可见，就像是golang 首字母小写的变量或者函数。foo+8(SB)表示相对于foo 8字节的内存地址；&lt;em&gt;注意 这里是相对符号的地址&lt;/em&gt;&lt;br&gt;
FP 用来引用程序的参数，这些引用是由编译器维护，通过该寄存器的偏移量来引用参数。在64位的机器上，0(FP)表示第一个参数，8(FP)表示第二个参数等等。为了程序的清晰与可读性，编译器强制在引用参数时使用名称。&lt;/p&gt;
&lt;h2 id=&#34;fp-伪sp-硬件sp之间的关系&#34;&gt;FP、 伪SP、 硬件SP之间的关系&lt;/h2&gt;
&lt;p&gt;SP分为伪SP和硬件寄存器SP，在栈桢为0的情况下 伪SP与硬件寄存器SP相等。可以使用有无symbol来区分是哪个寄存器： 有symbol 例如 foo-8(SP)表示伪寄存器，8(SP)表示硬件寄存器。&lt;/p&gt;
&lt;h3 id=&#34;栈结构&#34;&gt;栈结构&lt;/h3&gt;
&lt;h4 id=&#34;无参数无本地变量&#34;&gt;无参数无本地变量&lt;/h4&gt;
&lt;p&gt;无参数无本地变量栈结果是如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/fpspnoargs.png&#34; alt=&#34;没有参数没有本地变量&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过如下函数来验证&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#include &amp;#34;textflag.h&amp;#34; //
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TEXT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SpFp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NOSPLIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0-32&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将硬件&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP地址存储到AX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将伪&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP地址存储到BX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;CX&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP地址存储到CX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;AX地址存储到第一个返回值&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;BX地址存储到第二个返回值&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;CX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;CX地址存储到第三个返回值&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;存储的值存储到&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;也就是该函数的返回值&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;//将&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;放到第四个返回值&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;RET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SpFp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 汇编函数声明
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SpFp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;硬SP[%d] 伪SP[%d] FP[%d] addr[%d] SpFp[%d] \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SpFp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ ./spfp
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;硬SP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216112&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 伪SP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216112&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; FP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216120&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; addr&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;17385428&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; SpFp&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;17385904&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由输出可以看出在没有参数没有本地变量情况下硬件SP与伪SP相等，FP = 伪SP+8&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ dlv &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; ./fpsp
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;Type &lt;span class=&#34;s1&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; list of commands.
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dlv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; b *17385428
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;Breakpoint &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; at 0x10947d4 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; main.main&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; ./main.go:7
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dlv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由断点可以看出返回值就在main.go的第7行也就是 a,b,c, addr  := SpFp()&lt;/p&gt;
&lt;h4 id=&#34;有参数无本地变量&#34;&gt;有参数无本地变量&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#include &amp;#34;textflag.h&amp;#34; //
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TEXT&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;·&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SpFpArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NOSPLIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;$0-24&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;LEAQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;CX&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;AX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;BX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;MOVQ&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;CX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;FP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;RET&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SpFpArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 汇编函数声明
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SpFpArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;硬SP[%d] 伪SP[%d] FP[%d]\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ ./spfp
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;硬SP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216048&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 伪SP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216048&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; FP&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;824634216056&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由此可以看出这种情况硬件SP与伪SP相等，FP = 伪SP+8&lt;/p&gt;
&lt;h3 id=&#34;有本地变量&#34;&gt;有本地变量&lt;/h3&gt;
&lt;p&gt;在有本地变量情况下，在X86 和 ARM 中栈结构是不同的，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;// Stack frame layout
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;//
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;// &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x86&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;// +------------------+
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; args from &lt;span class=&#34;nb&#34;&gt;caller&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;// +------------------+ &amp;lt;- frame-&amp;gt;argp
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; address  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;// +------------------+
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  caller&lt;span class=&#34;s1&#34;&gt;&amp;#39;s BP (*) | (*) if framepointer_enabled &amp;amp;&amp;amp; varp &amp;lt; sp
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// +------------------+ &amp;lt;- frame-&amp;gt;varp
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// |     locals       |
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// +------------------+
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// |  args to callee  |
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// +------------------+ &amp;lt;- frame-&amp;gt;sp
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// (arm)
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// +------------------+
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// | args from caller |
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// +------------------+ &amp;lt;- frame-&amp;gt;argp
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;// | caller&amp;#39;&lt;/span&gt;s retaddr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;// +------------------+ &amp;lt;- frame-&amp;gt;varp
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     locals       &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;// +------------------+
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  args to callee  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;// +------------------+
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;// &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; address  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;// +------------------+ &amp;lt;- frame-&amp;gt;sp
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在这里特别关注X86，会使用到BP寄存器，这个寄存器主要用来指示栈的起始位置，现在很多编译器并不需要这个，因为可以通过SP加Offset来寻找栈起始位置。在amd64平台上,会在函数返回值之后插入8byte来放置Caller BP。
在有本地变量的情况，在本地变量和参数之间会插入函数返回值和 BP 寄存器，但是BP寄存器的插入必须满足两点要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数的栈帧大于0；&lt;/li&gt;
&lt;li&gt;满足条件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Framepointer_enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;goos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;goarch&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;framepointer_enabled&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;goarch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;goos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nacl&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外此时 硬件SP与伪SP是不相同的。&lt;br&gt;
硬件SP + locals = 伪SP&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://9p.io/plan9/&#34;&gt;https://9p.io/plan9/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://68k.hax.com/&#34;&gt;指令查询&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://9p.io/magic/man2html/1/8a&#34;&gt;命令查询&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19902040&#34;&gt;Go的标准IDE：Acme文本编辑器&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://golang.org/doc/asm&#34;&gt;A Quick Guide to Go&#39;s Assembler&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://lrita.github.io/2017/12/12/golang-asm/&#34;&gt;golang 汇编&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&#34;&gt;汇编语言入门教程&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://xargin.com/go-and-plan9-asm/&#34;&gt;[译]go 和 plan9 汇编&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://blog.brickgao.com/2019/01/27/split-stacks/&#34;&gt;split stacks&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://blog.cloudflare.com/how-stacks-are-handled-in-go/&#34;&gt;How Stacks are Handled in Go&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://lrita.github.io/2017/12/12/golang-asm/#go%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8&#34;&gt;go函数调用&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>golang module 使用教程</title>
      <link>https://www.geekgame.site/post/language/golang/module/</link>
      <pubDate>Thu, 30 May 2019 17:12:47 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/module/</guid>
      <description>
        
          &lt;p&gt;Go module 是golang最新的包管理工具，可以使依赖包版本信息更明确与可控。module 是关于Go packages的集合，存储在根目录下的go.mod文件中，go.mod 定义了模块的模块路径以及模块的依赖属性，依赖属性包含模块路径以及&lt;a href=&#34;https://semver.org/lang/zh-CN/&#34;&gt;特定寓意的版本信息&lt;/a&gt;。&lt;br&gt;
需要注意的是：在Go 1.13之前go module 在GOPATH下是默认不开启的，这是为了兼容的需要，如果需要使用go module可以在GOPATH/src外的路径创建go.mod文件。&lt;/p&gt;
&lt;p&gt;本文会介绍Go module的一些基本用法；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见命令&lt;/li&gt;
&lt;li&gt;创建一个模块&lt;/li&gt;
&lt;li&gt;添加一个依赖&lt;/li&gt;
&lt;li&gt;升级依赖&lt;/li&gt;
&lt;li&gt;其他命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常见命令&#34;&gt;常见命令&lt;/h1&gt;
&lt;p&gt;go mod 提供了以下命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download:  下载依赖包到本地缓存 ($GOPATH/pkg/mod), 该目录下的包所有项目共享;&lt;/li&gt;
&lt;li&gt;edit : 编辑go.mod;&lt;/li&gt;
&lt;li&gt;graph: 打印模块的依赖图;&lt;/li&gt;
&lt;li&gt;init: 在当前目录初始化mod;&lt;/li&gt;
&lt;li&gt;tidy : 添加缺失的依赖包并清理没有使用的包;&lt;/li&gt;
&lt;li&gt;vendor : 将依赖包复制到vendor目录;&lt;/li&gt;
&lt;li&gt;verify: 验证依赖是否正确;&lt;/li&gt;
&lt;li&gt;why : 解释为什么需要这个依赖;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;创建一个模块&#34;&gt;创建一个模块&lt;/h1&gt;
&lt;p&gt;如前文所说在GOPATH外的创建一个目录，例如 ～/gomod/hello;&lt;br&gt;
执行一下子命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt; ~/gomod/hello$ go mod init example.com/hello
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;go: creating new go.mod: module example.com/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建hello.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为使用SayHi,创建test文件 hello_test.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TestHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello() = %s, want %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;got&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;want&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行测试用例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt; ~/gomod/hello$ go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -run TestHello
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;PASS
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;ok  	example.com/hello	0.006s
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;添加一个依赖&#34;&gt;添加一个依赖&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go: extracting rsc.io/quote v1.5.2
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;go: extracting rsc.io/sampler v1.3.0
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;PASS
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;ok  	example.com/hello	0.009s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时会将代码下载到$GOPATH/pkg/mod目录下，之后运行不会重复下载，可以到go.mod已经更新了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;module example.com/hello
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;go 1.12
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;require rsc.io/quote v1.5.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 go list -m all 可以查看所有依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ go list -m all
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;example.com/hello
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;rsc.io/quote v1.5.2
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;rsc.io/sampler v1.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时目录下多了一个go.sum文件，这个文件是做什么的呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:qgOY6WgZOaTkIIMiVjBQcw93ERBE4m30iBm00nkL0i8&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;rsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;rsc.io/sampler v1.3.0 h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看出该文件存储了包的路径 版本 还有校验值；每次执行命令时都会check 该校验是否与download目录下的是否一致；不一致就会报错&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;verifying rsc.io/quote@v1.5.2/go.mod: checksum mismatch
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;	downloaded: h1:Q15uSTpOVzCmer7yFUWKviBR7qLGLuYQ5zPmjACcaxQ&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;	go.sum:     h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;升级依赖&#34;&gt;升级依赖&lt;/h1&gt;
&lt;p&gt;加入要把quote包升级到其他版本，比如v3（需要提前知道升级的版本以及其中函数），&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;quoteV3&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote/v3&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;quoteV3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;HelloV3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行 go test, 会自动下载V3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;go: downloading rsc.io/quote/v3 v3.1.0
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;go: extracting rsc.io/quote/v3 v3.1.0
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;PASS
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;ok  	example.com/hello	0.008s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看 go.mod&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;module example.com/hello
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;go 1.12
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;require &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;	golang.org/x/text v0.3.2 // indirect
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;	rsc.io/quote v1.5.2
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;	rsc.io/quote/v3 v3.1.0
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并没有删除 	rsc.io/quote v1.5.2 ，这需要执行 go mod tidy 来去除不使用的包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;$ go mod tidy
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;$ cat go.mod
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;module example.com/hello
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;go 1.12
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;require &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;	golang.org/x/text v0.3.2 // indirect
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	rsc.io/quote/v3 v3.1.0
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;其他命令&#34;&gt;其他命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;replace 替换依赖项模块： 可以将包替换成另一个包或者不同版本;&lt;/li&gt;
&lt;li&gt;exclude 忽略依赖项模块；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;go mod init 创建一个模块，并创建文件go.mod;&lt;/li&gt;
&lt;li&gt;go build , go test 还有其他关于编译的命令都会按需将依赖添加到go.mod;&lt;/li&gt;
&lt;li&gt;go list -m all 输出当前模块所有的依赖；&lt;/li&gt;
&lt;li&gt;go mod tidy 可以删除不使用的依赖；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;using-go-modules&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>高效shell</title>
      <link>https://www.geekgame.site/post/shell/effective_shell/</link>
      <pubDate>Thu, 16 May 2019 19:34:57 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/shell/effective_shell/</guid>
      <description>
        
          &lt;h2 id=&#34;shell&#34;&gt;shell&lt;/h2&gt;
&lt;p&gt;使用超强组合 &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;oh-my-zsh&lt;/a&gt; + &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-autosuggestions&lt;/a&gt; + &lt;a href=&#34;https://github.com/rupa/z&#34;&gt;z - jump around&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oh-my-zsh : 目前非常火的终端配置，只需要简单下载到本地，就可以使用；&lt;/li&gt;
&lt;li&gt;autosuggestions: 补全已经输入过的命令；&lt;/li&gt;
&lt;li&gt;jump around : 感觉这个非常有用，在目录的跳转之间节省大量的时间；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dvorka/hstr&#34;&gt;hstr&lt;/a&gt;: 查找历史命令，比Ctrl+R 方便太多，如果使用zsh 需要执行hstr --show-configuration &amp;gt;&amp;gt; ~/.zshrc , source ~/.zshrc ；&lt;/li&gt;
&lt;li&gt;htop: 加强版的top, 安装与介绍可以看一下&lt;a href=&#34;https://cloud.tencent.com/developer/article/1115041&#34;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>MQTT 基本概念</title>
      <link>https://www.geekgame.site/post/protocol/mqtt/</link>
      <pubDate>Wed, 15 May 2019 13:24:24 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/protocol/mqtt/</guid>
      <description>
        
          &lt;p&gt;MQTT(Message Queuing Telemetry Transport，消息队列遥测传输协议)是最初由IBM开发的一种基于发布/订阅模式的轻量级通信协议,工作在tcp/ip协议簇上。主要优势是
低开销、低带宽，在lot上应用较为广泛。&lt;/p&gt;
&lt;h1 id=&#34;mqtt-架构&#34;&gt;MQTT 架构&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;MQTT 是c/s模型，每个客户端通过tcp连接到服务器(broker)；&lt;/li&gt;
&lt;li&gt;MQTT 是面向消息的。每个消息都是独立的数据块，对于broker来说是不透明的；&lt;/li&gt;
&lt;li&gt;每条消息都会发送到一个地址，这个地址称为主题(topic),订阅主题的每个客户端都会收到发布到该主题上的每条消息；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如下所示： 客户端 A、B、C都连接到一个中间broker; &lt;br&gt;
B、C都订阅topic :dev_info 来获取其他设备的设备信息；&lt;br&gt;
A发布设备信息到topic dev_info，broker 将该消息转发给所有的订阅者即 BC；&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/mqtt_arch.png&#34; alt=&#34;mqqtt_arch&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;主题匹配&#34;&gt;主题匹配&lt;/h1&gt;
&lt;p&gt;mqtt 主题是分层级的，通过／划分层级。如 A/B/G ;
注意在订阅时可以使用通配符，发布时不可以使用通配符；&lt;br&gt;
通配符 + 匹配任何单个主题，# 匹配任意名称任意数量的主题；&lt;br&gt;
例如： A/+/G 可以匹配 A/B/G A/C/G A/D/G 等&lt;br&gt;
A/# 可以配置 A/B/C/D/E/F/G&lt;/p&gt;
&lt;h1 id=&#34;qos&#34;&gt;Qos&lt;/h1&gt;
&lt;p&gt;mqtt 支持三种级别的服务质量:&lt;br&gt;
0: &amp;quot;至多一次&amp;quot; 并不需要回复确认消息，有可能丢失消息；&lt;br&gt;
1: &amp;quot;至少一次&amp;quot; 收到报文后会回复确认消息，这样会重复收到消息（如超时回复确认消息情况）；&lt;br&gt;
2: &amp;quot;只有一次&amp;quot; 通过 publish pubrec pubrel pubcomp 四个状态确认有且只有一次消息被处理，但是网络带宽会增加；&lt;/p&gt;
&lt;h1 id=&#34;最后遗愿last-will&#34;&gt;最后遗愿(last will)&lt;/h1&gt;
&lt;p&gt;提前预定好的消息，当客户端断开连接时，broker 会将该消息发送给所有订阅者的客户端；&lt;/p&gt;
&lt;h1 id=&#34;持久retain&#34;&gt;持久(retain)&lt;/h1&gt;
&lt;p&gt;topic 设置retain 之后，broker 会保留最后一条retain消息,当client 订阅该topic 时会立刻收到一条retain消息；&lt;/p&gt;
&lt;h1 id=&#34;清理会话cleansession&#34;&gt;清理会话（cleansession）&lt;/h1&gt;
&lt;p&gt;设置为true时，客户端建立连接时将清除旧的连接，即再次连接时不会收到消息；&lt;br&gt;
设置为false时，客户端即使断开连接，再次连接时会收到未接收的消息；&lt;/p&gt;
&lt;h1 id=&#34;安全&#34;&gt;安全&lt;/h1&gt;
&lt;p&gt;可以通过ssl/tls 双向认证保证数据安全， 也可以通过 单向 ssl/tls + 单向https/username/password 保证双向安全；&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/MQTT&#34;&gt;维基百科 MQTT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mosquitto.org/man/mqtt-7.html&#34;&gt;MQTT manpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php&#34;&gt;MQTT and CoAP, IoT Protocols&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
        
      </description>
    </item>
    
    <item>
      <title>mac  sed 报错</title>
      <link>https://www.geekgame.site/post/shell/mac%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97/</link>
      <pubDate>Mon, 13 May 2019 12:36:43 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/shell/mac%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97/</guid>
      <description>
        
          &lt;p&gt;mac 下的sed使用方法与linux略有不同，如果按照Linux方式使用sed -i替换文本时会报如下错误&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$sed&lt;/span&gt; -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/xxxx/yyy/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;sed: 1: &lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;: extra characters at the end of p &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;sed -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;   &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/XX/YY/g&amp;#34;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;============================================&lt;/p&gt;
&lt;p&gt;sed 用法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;sed: illegal option -- -
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;usage: sed script &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-Ealn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i extension&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file ...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;       sed &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-Ealn&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i extension&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-e script&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ... &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-f script_file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ... &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file ...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;-i 后边需要添加备份文件的后缀名,如果不需要可以使用&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,但是不可以忽略
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;如 sed -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;.bak&amp;#34;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/xxxx/yyy/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; 会将替换后的文本写入test.bak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
