<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 有趣</title>
    <link>https://www.geekgame.site/tags/docker/</link>
    <description>Recent content in Docker on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 29 Jan 2024 14:20:46 +0800</lastBuildDate>
    <atom:link href="https://www.geekgame.site/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker 容器日志过大问题</title>
      <link>https://www.geekgame.site/post/container/docker/log/</link>
      <pubDate>Mon, 29 Jan 2024 14:20:46 +0800</pubDate>
      <guid>https://www.geekgame.site/post/container/docker/log/</guid>
      <description>docker 日志文件存放哪些日志 Docker容器的标准输出（stdout）和标准错误输出（stderr）被发送到容器的日志驱动程序，这些日志可以通过 docker logs 命令来访问。默认情况下，Docker将这些日志存储在宿主机上的 /var/lib/docker/containers// 目录中，每个容器都有一个单独的目录。&#xA;如何清理 docker 日志文件 清理Docker日志文件的方法通常包括手动清理以及使用工具自动清理；&#xA;业务控制 减少业务的输出，可以控制日志量，但这并不是一个好的方法。&#xA;临时清理 可以通过以下命令临时清理，但这只是临时的方法，不能根治。&#xA;1logs=$(find /var/lib/docker/containers/ -name *-json.log*) ; for log in $logs ; do echo &amp;#34;clean logs : $log&amp;#34; ; cat /dev/null &amp;gt; $log ; done Docker日志驱动配置 使用Docker的日志驱动配置选项来限制日志文件大小和保留时间。你可以在运行容器时使用 --log-opt 选项来配置日志的最大大小和保留时间，从而使Docker自动清理过期的日志。 关于日志驱动配置可以分为以下两个方法：&#xA;启动容器时进行设置 1# max-size 最大数值 2# max-file 最大日志数 3$ docker run -it --log-opt max-size=10m --log-opt max-file=3 nginx 通过daemon.json 全局修改 1{ 2 &amp;#34;log-driver&amp;#34;:&amp;#34;json-file&amp;#34;, 3 &amp;#34;log-opts&amp;#34;:{ 4 &amp;#34;max-size&amp;#34; :&amp;#34;50m&amp;#34;,&amp;#34;max-file&amp;#34;:&amp;#34;1&amp;#34; 5 } 6} 这个需要重启docker .</description>
    </item>
    <item>
      <title>一文读懂iptables/netfilter附带实战</title>
      <link>https://www.geekgame.site/post/linux/iptables/</link>
      <pubDate>Thu, 13 Oct 2022 14:14:13 +0800</pubDate>
      <guid>https://www.geekgame.site/post/linux/iptables/</guid>
      <description>简介 iptables 是一个命令行工具，用来配置包过滤的规则的，而真正实现这些规则的程序位于内核层，叫做 netfilter, 可以讲iptables理解为netfilter的客户端，iptables 与 netfilter 共同组成了包过滤软件。 平常工作交流中 iptables 也经常代指该内核级防火墙，iptables 用于 ipv4, 相应的 ip6tables 用于 IPv6。&#xA;概念介绍 （图片引用）&#xA;hook iptables 在内核是对数据包做修改、转发、丢弃等操作的，而这些操作都是在一个个 hook 上完成的，hook 就是注册数据包处理函数的地方。hook点都是预定义好的，一共划分了五个hook点，分别为:&#xA;NF_IP_PRE_ROUTING: 接收到的包进入协议栈后由该hook上注册的函数来处理，这是在查询路由之前; NF_IP_LOCAL_IN: 查询路由后判断数据包是发往本机的，则首先进入该hook点，由该hook点上注册的函数来处理; NF_IP_FORWARD: 查询路由后判断数据包是不是本机的，则进入该hook点，由该hook点上注册的函数来处理; NF_IP_LOCAL_OUT: 本机发出的数据包首先进入该hook点，由该hook点上注册的函数来处理; NF_IP_POST_ROUTING: 数据包在发出本机之前，路由判断之后， 进入该hook点，由该hook点上注册的函数来处理; 表、链、规则 iptables 是由表(table)来组织的，而表又是由链(chain) 组成，链中包含了一个或者多个规则(rule)，规则既是对数据包处理的具体定义，所以总体来看 iptables -&amp;gt; table -&amp;gt; chain -&amp;gt; rule。&#xA;表 iptables 一共有五个table,分别为：&#xA;raw 用于配置数据包，提供一个让数据包不被系统跟踪的机制; filter 判断是否允许一个包通过; nat 用于 网络地址转换（例如：端口转发）; mangle 修改包的 IP 头，例如TTL，增加或减少包可以经过的跳数; security 用于 强制访问控制 网络规则; 链 链中包含了具体的规则，按照顺序进行匹配,内置了五个chain 与 hook 一一对应:</description>
    </item>
    <item>
      <title>DOCKER 容器访问不通问题定位</title>
      <link>https://www.geekgame.site/post/container/docker/network_can_not_access/</link>
      <pubDate>Thu, 13 Jan 2022 13:44:25 +0800</pubDate>
      <guid>https://www.geekgame.site/post/container/docker/network_can_not_access/</guid>
      <description>现象 最近有一台设备上部署的容器服务无法从宿主机之外的节点进行访问。&#xA;分析 要定位该问题首先要确认以下几个事情：&#xA;1. 服务是否正常启动&#xA;2. 确认容器的网络模式&#xA;3. 容器如何与外面的节点通讯&#xA;4. 数据包在设备上实际流转&#xA;定位过程 确认服务是否正常 查看容器运行是否正常: 1 2CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3cfde73945bf6 ***:1.0.7 &amp;#34;/bin/sh -c /opt/boo…&amp;#34; 27 hours ago Up 27 hours 0.0.0.0:7788-&amp;gt;7788/tcp *** 4 查看服务运行是否正常: 1[root@my-ti-johnkl06 ~]# curl 172.17.0.2:7788 2hello world 由以上可以得出 容器运行正常，服务运行正常并且在宿主机上可以访问。&#xA;确认容器的网络模式 通过命令 docker inspect &amp;lt;container_id&amp;gt; -f &amp;quot;{{json .NetworkSettings.Networks }}&amp;quot; 来查看容器的网络模式。&#xA;1[root@my-ti-johnkl06 ~]# docker inspect cfde73945bf6 -f &amp;#34;{{json .NetworkSettings.Networks }}&amp;#34; 2{&amp;#34;bridge&amp;#34;:{&amp;#34;IPAMConfig&amp;#34;:null,&amp;#34;Links&amp;#34;:null,&amp;#34;Aliases&amp;#34;:null,&amp;#34;NetworkID&amp;#34;:&amp;#34;c52c24b417d9787fd1bf01d409dda7ecef2f519553f719eabe062a0a8132c327&amp;#34;,&amp;#34;EndpointID&amp;#34;:&amp;#34;6e65d42c44e553c953ca763ad5c1e4046374993bdf263358e10d45bdef891d8d&amp;#34;,&amp;#34;Gateway&amp;#34;:&amp;#34;172.17.0.1&amp;#34;,&amp;#34;IPAddress&amp;#34;:&amp;#34;172.17.0.2&amp;#34;,&amp;#34;IPPrefixLen&amp;#34;:16,&amp;#34;IPv6Gateway&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;GlobalIPv6Address&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;GlobalIPv6PrefixLen&amp;#34;:0,&amp;#34;MacAddress&amp;#34;:&amp;#34;02:42:ac:11:00:02&amp;#34;,&amp;#34;DriverOpts&amp;#34;:null}} 由上可以得出 容器网络模式是 bridge。</description>
    </item>
  </channel>
</rss>
