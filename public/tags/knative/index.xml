<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>knative on 有趣</title>
    <link>https://www.geekgame.site/tags/knative/</link>
    <description>Recent content in knative on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 18 Aug 2021 15:26:32 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/tags/knative/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>knative入门</title>
      <link>https://www.geekgame.site/post/k8s/serverless/knative/knative-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 18 Aug 2021 15:26:32 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/serverless/knative/knative-%E5%85%A5%E9%97%A8/</guid>
      <description>
        
          &lt;h1 id=&#34;什么是knative&#34;&gt;什么是knative&lt;/h1&gt;
&lt;p&gt;knative 是一个基于 Kubernetes 的 serverless 框架,其主要目标是在基于Kubernetes之上为整个开发生命周期提供帮助. 不仅可以部署和伸缩应用程序,还可以构建和打包应用程序. Knative 使开发者能够专注于编写代码，而无需担心构建、部署和管理应用等“单调而棘手”的工作。&lt;/p&gt;
&lt;p&gt;如下图所示, knative是建立在 kubernetes和 isto平台之上的,使用 kubernetes提供的容器管理能力( deployment、 replicase 和 pods等),以及 isto提供的网络管理功能( Ingress、LB、 dynamic route等)。
&lt;img src=&#34;https://www.geekgame.site/static/k8s/knative_arch.png&#34; alt=&#34;&#34;&gt;
各个角色之间的关系,如上图所示:&lt;/p&gt;
&lt;h1 id=&#34;何为serverless&#34;&gt;何为serverless&lt;/h1&gt;
&lt;p&gt;serverless 中文可以翻译为无服务器架构, 有两个方面的定义: &lt;br&gt;
狭义讲就是你的服务是很少的一段代码或者是一个函数,这个代码或者函数可以通过事件(一个http请求或者消息队列的消息)来触发,总结下来就是 Trigger + FAAS + BAAS(高可用免运维的后端服务);&lt;br&gt;
广义上来讲serverless是简化运维的一种方案,即服务免运维,可实现 CI/CD,自动扩缩容,灰度等自动化操作;&lt;/p&gt;
&lt;p&gt;knative 就是属于广义上定义的serverless, 它构建在 Kubernetes 的基础上,并为构建和部署无服务器架构(serverless)和基于事件驱动的应用程序提供了一致的标准模式。Knative 减少了这种新的软件开发方法所产生的开销,同时还把路由(routing)和事件(eventing)的复杂性抽象出来。&lt;/p&gt;
&lt;h1 id=&#34;核心组件&#34;&gt;核心组件:&lt;/h1&gt;
&lt;p&gt;为了实现对serverless 的管理, knative 将整个系统划分为三个部分, 主要由三个组件来实现&lt;br&gt;
构建: 通过灵活的可配置方法将源代码构建为容器;&lt;br&gt;
服务: 管理应用的部署和服务支持;&lt;br&gt;
事件: 用户自动完成事件的绑定和触发;&lt;/p&gt;
&lt;h2 id=&#34;knative-服务kantive-serving&#34;&gt;Knative 服务(kantive Serving)&lt;/h2&gt;
&lt;p&gt;knative serving 主要是用来部署serverless 应用以及为其提供服务支持.其主要特性如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速部署Serverless 容器&lt;/li&gt;
&lt;li&gt;自动缩放包括将pod缩放到0&lt;/li&gt;
&lt;li&gt;支持多个网络组件来提供路由和网络编程, 例如 Ambassador、Contour、Kourier、Gloo 和 Istio。&lt;/li&gt;
&lt;li&gt;支持部署快照。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knative Serving 通过 Kubernetes 自定义资源 (CRD) 来控制serverless 应用在集群中的行为 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Route: route.serving.knative.dev资源将网络端点映射到一个或者多个Revision. 可以通过多种方式管理流量.包括灰度流量和重命名路由.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration: configuration.serving.knative.dev 负责保持Deployment的期望状态,提供了代码和配置之间清晰的分离,并遵循应用开发的12因素.修改一次Configuration就会生成一个Revision;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Revision: revision.serving.knative.dev 该资源是对工作负载进行的每次修改的代码和配置的时间点快照. Revision是不变对象,如果有用就可以保留.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service: service.serving.knative.dev资源自动管理工作负载的整个生命周期。负责创建Route、Configuration以及Revision资源.通过Service可以将流量路由到最新版本或者指定版本的Revision;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果单独控制 Route 和 Configuration,那么就可以不使用Service，但是knative 推荐使用service,因为它会帮你自动管理 Route 和 Configuration.&lt;/p&gt;
&lt;p&gt;资源关系图:
&lt;img src=&#34;https://www.geekgame.site/static/k8s/knative_serving_resource.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;knative-service-测试&#34;&gt;knative service 测试&lt;/h3&gt;
&lt;p&gt;一个 knative service 的 helloworld-go.yaml 如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;serving.knative.dev/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-go&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-go&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;autoscaling.knative.dev/target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 单个pod可以处理的最大并发数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;registry.cn-hangzhou.aliyuncs.com/knative-sample/helloworld-go:160e4dc8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TARGET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提交yaml文件到Kubernetes集群：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl apply -f helloworld-go.yaml
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;service.serving.knative.dev/helloworld-go created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看service状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl get service.serving.knative.dev
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;NAME            URL                                        LATESTCREATED         LATESTREADY           READY   REASON
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;helloworld-go   http://helloworld-go.default.example.com   helloworld-go-shphd   helloworld-go-shphd   True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提交service 之后就会创建出 route 和 configuration, 如下所示:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl  get route helloworld-go -o yaml
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;apiVersion: serving.knative.dev/v1
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;kind: Route
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;metadata:
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  annotations:
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    serving.knative.dev/creator: kubernetes-admin
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    serving.knative.dev/lastModifier: kubernetes-admin
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;  creationTimestamp: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:09:02Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  finalizers:
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  - routes.serving.knative.dev
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  generation: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;  labels:
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    serving.knative.dev/service: helloworld-go
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;  name: helloworld-go
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  namespace: default
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;  ownerReferences:
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;  - apiVersion: serving.knative.dev/v1
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    blockOwnerDeletion: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    controller: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    kind: Service
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    name: helloworld-go
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    uid: d45f60a7-c588-4fb0-8072-fb07f8b4bfd9
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;  resourceVersion: &lt;span class=&#34;s2&#34;&gt;&amp;#34;299550247&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;  selfLink: /apis/serving.knative.dev/v1/namespaces/default/routes/helloworld-go
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;  uid: bb5c65e1-1d4f-4cf8-82b5-792be2ee110f
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;spec:
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;  traffic:
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;  - configurationName: helloworld-go
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;    latestRevision: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;    percent: &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;status:
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;  address:
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;    url: http://helloworld-go.default.svc.cluster.local
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;  conditions:
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;  - lastTransitionTime: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:12:39Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;    status: &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;    type: AllTrafficAssigned
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;  - lastTransitionTime: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:12:39Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;    message: autoTLS is not enabled
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;    reason: TLSNotEnabled
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;    status: &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;    type: CertificateProvisioned
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;  - lastTransitionTime: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:12:42Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;    status: &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;    type: IngressReady
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;  - lastTransitionTime: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:12:42Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;    status: &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;    type: Ready
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;  observedGeneration: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;  traffic:
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;  - latestRevision: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;    percent: &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;    revisionName: helloworld-go-shphd
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;  url: http://helloworld-go.default.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl get config helloworld-go  -o yaml
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;apiVersion: serving.knative.dev/v1
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;kind: Configuration
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;metadata:
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;  annotations:
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    serving.knative.dev/creator: kubernetes-admin
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    serving.knative.dev/lastModifier: kubernetes-admin
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    serving.knative.dev/routes: helloworld-go
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  creationTimestamp: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:09:02Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  generation: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  labels:
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    serving.knative.dev/route: helloworld-go
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    serving.knative.dev/service: helloworld-go
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;  name: helloworld-go
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;  namespace: default
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;  ownerReferences:
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;  - apiVersion: serving.knative.dev/v1
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;    blockOwnerDeletion: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;    controller: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;    kind: Service
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;    name: helloworld-go
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;    uid: d45f60a7-c588-4fb0-8072-fb07f8b4bfd9
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;  resourceVersion: &lt;span class=&#34;s2&#34;&gt;&amp;#34;299550167&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;  selfLink: /apis/serving.knative.dev/v1/namespaces/default/configurations/helloworld-go
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;  uid: 7fe6974b-1eb6-475d-9a13-f675e2849c4b
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;spec:
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;  template:
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;    metadata:
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;      annotations:
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;        autoscaling.knative.dev/target: &lt;span class=&#34;s2&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;      creationTimestamp: null
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;      labels:
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;        app: helloworld-go
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;    spec:
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;      containerConcurrency: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;      containers:
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;      - env:
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;        - name: TARGET
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;          value: World
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;        image: registry.cn-hangzhou.aliyuncs.com/knative-sample/helloworld-go:160e4dc8
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;        name: user-container
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;        ports:
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;        - containerPort: &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;          name: http1
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;        readinessProbe:
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;          successThreshold: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;          tcpSocket:
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;            port: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;        resources: &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;      timeoutSeconds: &lt;span class=&#34;m&#34;&gt;300&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;status:
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;  conditions:
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;  - lastTransitionTime: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-08-19T14:12:39Z&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;    status: &lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;55&lt;/span&gt;    type: Ready
&lt;span class=&#34;ln&#34;&gt;56&lt;/span&gt;  latestCreatedRevisionName: helloworld-go-shphd
&lt;span class=&#34;ln&#34;&gt;57&lt;/span&gt;  latestReadyRevisionName: helloworld-go-shphd
&lt;span class=&#34;ln&#34;&gt;58&lt;/span&gt;  observedGeneration: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建Configuration 之后，就会创建出相应的Deployment、ReplicaSet 和 Pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl get deployment -o name &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep helloworld
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;deployment.apps/helloworld-go-shphd-deployment
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl get replicasets -o name &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep helloworld
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;replicaset.apps/helloworld-go-shphd-deployment-776b6c5578
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;➜  &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; kubectl get pod &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep helloworld
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;helloworld-go-shphd-deployment-776b6c5578-r4gpk          2/2     Running            &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          50s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到pod 已经创建成功， 我们该如何访问helloworld的服务呢？这正是 Route 的用武之地。&lt;br&gt;
Knative 中的 Route 提供了一种将流量路由到正在运行的代码的机制。它将一个命名的,HTTP 可寻址端点映射到一个或者多个 Revision。Configuration 本身并不定义 Route。
在上面的Route定义中 100% 流量发送到名称为helloworld-go的 Configuration 最新就绪的Revision ,即 latestReadyRevisionName: helloworld-go-shphd；&lt;/p&gt;
&lt;h4 id=&#34;那么到底如何进行访问服务呢&#34;&gt;那么到底如何进行访问服务呢？&lt;/h4&gt;
&lt;p&gt;首先看一下流量转发路径：
&lt;img src=&#34;https://www.geekgame.site/static/k8s/flow.png&#34; alt=&#34;&#34;&gt;
用户发起的请求首先会打到 Gateway 上面,然后 Istio 通过 VirtualService 再把请求转发到具体的 Revision 上面。当然用户的流量还会经过.
Knative 的 queue 容器才能真正转发到业务容器, 这里我们直接使用 ClusterIP进行测试。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@test ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl get svc istio-ingressgateway -n istio-system&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;NAME                   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                                                      AGE
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;istio-ingressgateway   NodePort   10.99.173.150   &amp;lt;none&amp;gt;        15021:31685/TCP,80:31376/TCP,443:30994/TCP,15012:31651/TCP,15443:30172/TCP   3d13h
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Gateway 是通过 VirtualService 来进行流量转发的,这就要求访问者要知道目标服务的名字才行 ( 域名 ),所以要先获取helloworld-go的域名&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@test ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl get route helloworld-go&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;NAME            URL                                        READY   REASON
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;helloworld-go   http://helloworld-go.default.example.com   True
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 已经拿到.IP.地址和.Hostname,可以通过.curl.直接发起请求:&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@test ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# curl -H &amp;#34;Host:  helloworld-go.default.example.com&amp;#34; http://10.99.173.150&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;如何进行扩缩容&#34;&gt;如何进行扩缩容？&lt;/h4&gt;
&lt;p&gt;主要依靠两个组件 Autoscaler(自动伸缩器)和 Activator(激活器)， 具体如下所示：
&lt;img src=&#34;https://www.geekgame.site/static/k8s/scale.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Autoscaler 收集打到 Revision 并发请求数量的有关信息。为了做到这一点,它在 Revision Pod 内运行一个称之为queue-proxy  的容器,该 Pod 中也运行用户提供的 (user-provided) 镜像。
queue-proxy  检测该 Revision 上观察到的并发量,然后它每隔一秒将此数据发送到 Autoscaler。Autoscaler 每两秒对这些指标进行评估。基于评估的结果,它增加或者减少 Revision 部署的规模。
Autoscaler 也负责缩容至零。Revision 处于 Active (激活) 状态才接受请求。当一个 Revision 停止接受请求时, Autoscaler 将其置为 Reserve (待命) 状态,条件是每 Pod 平均并发必须持续 30 秒保持为 0 (这是默认设置,但可以配置)。
处于 Reserve 状态下,一个 Revision 底层部署缩容至零并且所有到它的流量均路由至 Activator。Activator 是一个共享组件,其捕获所有到待命 Revisios 的流量。当它收到一个到某一待命 Revision 的请求后,它转变 Revision 状态至Active。然后代理请求至合适的 Pods。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;《knative 云原生应用开发指南》&lt;br&gt;
&lt;a href=&#34;https://knative.dev/docs/serving/&#34;&gt;Knative Serving&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
