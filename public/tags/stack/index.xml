<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on 有趣</title>
    <link>https://www.geekgame.site/tags/stack/</link>
    <description>Recent content in Stack on 有趣</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sat, 15 Jun 2019 16:41:11 +0800</lastBuildDate>
    <atom:link href="https://www.geekgame.site/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang 栈结构</title>
      <link>https://www.geekgame.site/post/language/golang/plan9/</link>
      <pubDate>Sat, 15 Jun 2019 16:41:11 +0800</pubDate>
      <guid>https://www.geekgame.site/post/language/golang/plan9/</guid>
      <description>&lt;h1 id=&#34;程序组成&#34;&gt;程序组成&lt;/h1&gt;&#xA;&lt;p&gt;程序由代码和数据组成，数据又有静态与动态之分；&lt;br&gt;&#xA;动态数据：存放在堆区和栈区；&lt;br&gt;&#xA;静态数据：静态只读数据可以放在代码区，也可以放在特定的只读数据区；&lt;br&gt;&#xA;可读写的已初始化的静态数据放在数据区，可读写的未初始化的静态数据放在bss区；&lt;/p&gt;&#xA;&lt;h1 id=&#34;寄存器&#34;&gt;寄存器&lt;/h1&gt;&#xA;&lt;h2 id=&#34;伪寄存器&#34;&gt;伪寄存器&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;FP(Frame pointer): 表示参数以及返回值的基地址；&#xA;通过 SYMBOL+/-ffset(FP)&lt;/li&gt;&#xA;&lt;li&gt;PC(Program counter): 跳转寄存器，存储下一条指令地址；&lt;/li&gt;&#xA;&lt;li&gt;SB(Static base pointer): 全局静态起始地址.&lt;/li&gt;&#xA;&lt;li&gt;SP(Stack pointer): 表示本地变量的起始地址；&lt;br&gt;&#xA;使用方式 symbol + offset(SP), 例如第一个变量 local0 + (0)SP , local0 只是定义一个符号，类似于 local0 := xxxx&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这个四个伪寄存器在golang 汇编中经常被用到，尤其是SB和FP；&lt;br&gt;&#xA;SB 全局静态起始地址, foo(SB)表示foo在内存中的地址。这个语法有两个修饰符&amp;lt;&amp;gt; 和 +N，其中N是一个整数。 foo&amp;lt;&amp;gt;(SB)表示foo是一个私有元素只能在&#xA;当前文件中可见，就像是golang 首字母小写的变量或者函数。foo+8(SB)表示相对于foo 8字节的内存地址；&lt;em&gt;注意 这里是相对符号的地址&lt;/em&gt;&lt;br&gt;&#xA;FP 用来引用程序的参数，这些引用是由编译器维护，通过该寄存器的偏移量来引用参数。在64位的机器上，0(FP)表示第一个参数，8(FP)表示第二个参数等等。为了程序的清晰与可读性，编译器强制在引用参数时使用名称。&lt;/p&gt;&#xA;&lt;h2 id=&#34;fp-伪sp-硬件sp之间的关系&#34;&gt;FP、 伪SP、 硬件SP之间的关系&lt;/h2&gt;&#xA;&lt;p&gt;SP分为伪SP和硬件寄存器SP，在栈桢为0的情况下 伪SP与硬件寄存器SP相等。可以使用有无symbol来区分是哪个寄存器： 有symbol 例如 foo-8(SP)表示伪寄存器，8(SP)表示硬件寄存器。&lt;/p&gt;&#xA;&lt;h3 id=&#34;栈结构&#34;&gt;栈结构&lt;/h3&gt;&#xA;&lt;h4 id=&#34;无参数无本地变量&#34;&gt;无参数无本地变量&lt;/h4&gt;&#xA;&lt;p&gt;无参数无本地变量栈结果是如下所示&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
