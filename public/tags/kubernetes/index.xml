<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on 有趣</title>
    <link>https://www.geekgame.site/tags/kubernetes/</link>
    <description>Recent content in kubernetes on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 05 Jul 2021 11:09:37 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes 监控架构(译)</title>
      <link>https://www.geekgame.site/post/k8s/monitoring_arch/</link>
      <pubDate>Mon, 05 Jul 2021 11:09:37 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/monitoring_arch/</guid>
      <description>
        
          &lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;p&gt;监控分为两个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心监控流程由kubelet、资源评估器、metric-server(Heapster 精简版)以及API server 上的master metrics API 组成. 这些监控数据被系统核心组件使用,例如调度逻辑(调度器和基于系统指标的HPA) 和 开箱即用的UI组件(例如 kubectl top), 这条监控管道不适合与第三方监控系统集成.&lt;/li&gt;
&lt;li&gt;另一个监控流程用于从系统收集各种指标并将这些指标导出到用户端、HPA(自定义指标)以及通过适配器到处到 infrastore. 用户可以从众多的监控系统中进行选择,也可以不运行监控系统. Kubernetes 不附带监控管道, 但是第三方的选项是很容易被安装的. 我们希望第三方管道通常由每个节点的代理和一个集群级聚合器组成.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该架构在本文档附录中的图表中进行了说明。&lt;/p&gt;
&lt;h1 id=&#34;介绍和目标&#34;&gt;介绍和目标&lt;/h1&gt;
&lt;p&gt;本文档为Kubernetes 提出了一个高级监控架构. 它涵盖了  Kubernetes Monitoring Architecture 文档中提到的一些问题. 特别关注有望满足大量需求的监控架构(组件以及组件之间的交互), 我们没有为实现这个架构指定任何特定的时间,也没有规划路线图.&lt;/p&gt;
&lt;h2 id=&#34;术语&#34;&gt;术语&lt;/h2&gt;
&lt;p&gt;有两种指标系统指标和服务指标, 系统指标是一般的指标,通常可以从每个监控的实体获得(例如容器和节点的CPU和内存使用情况). 服务指标是在应用代码明确定义并导出的(例如API服务器状态码为500的请求数量), 系统指标和服务指标都是从用户的容器或者系统基础组件获取(主节点组件,比如API服务器, 运行在主节点的插件pod, 和运行在用户节点的插件pod)&lt;/p&gt;
&lt;p&gt;我们把系统指标分为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心指标 这些指标都是Kubernetes理解并用于其内部组件和核心业务的指标 — 例如, 用于调度的指标(包括用于资源评估、初始资源/垂直自动缩放,集群自动缩放, 和Pod水平自动缩放(不包括自定义指标)), Kube 仪表盘, 和 “kubectl top”, 截至目前, 这包括cpu 累计使用情况, 内存瞬时使用情况, pod 磁盘使用情况, 容器的磁盘使用情况.&lt;/li&gt;
&lt;li&gt;非核心指标，不被 Kubernetes 解读；我们通常假设它们包括核心指标（尽管不一定采用 Kubernetes 理解的格式）以及其他指标。
我们认为日志记录与监控是分开的，因此日志记录超出了本文档的范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;要求&#34;&gt;要求&lt;/h1&gt;
&lt;p&gt;监控架构应该是下面这个样子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括作为核心 Kubernetes 一部分的解决方案和
&lt;ul&gt;
&lt;li&gt;通过标准的主 API（今天的主指标 API）使有关节点、Pod 和容器的核心系统指标可用，从而使 Kubernetes 的核心功能不依赖于非核心组件&lt;/li&gt;
&lt;li&gt;要求 Kubelet 仅导出一组有限的指标，即核心 Kubernetes 组件正确运行所需的指标（这与#18770相关）&lt;/li&gt;
&lt;li&gt;可以扩展到至少 5000 个节点&lt;/li&gt;
&lt;li&gt;足够小，我们可以要求它的所有组件在所有部署配置中运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包括一个可以提供历史数据的开箱即用的解决方案，例如支持初始资源和垂直 pod 自动缩放以及集群分析查询，这仅依赖于核心 Kubernetes&lt;/li&gt;
&lt;li&gt;允许不属于核心 Kubernetes 的第三方监控解决方案，并且可以与需要服务指标的 Horizo​​ntal Pod Autoscaler 等组件集成&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;架构&#34;&gt;架构&lt;/h1&gt;
&lt;p&gt;我们将长期架构计划的描述分为核心指标管道和监控管道。对于每个，有必要考虑如何处理来自 master 和 minion 的每种类型的指标（核心指标、非核心指标和服务指标）&lt;/p&gt;
&lt;h2 id=&#34;核心指标管道&#34;&gt;核心指标管道&lt;/h2&gt;
&lt;p&gt;核心指标管道收集一组核心系统指标。这些指标有两个来源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubelet，提供每个节点/pod/容器的使用信息（目前属于 Kubelet 一部分的 cAdvisor 将被精简以仅提供核心系统指标）&lt;/li&gt;
&lt;li&gt;作为 DaemonSet 运行的资源估计器，将从 Kubelet 中获取的原始使用值转换为资源估计值（调度程序使用的值用于更高级的基于使用情况的调度程序）
这些来源由我们称为metrics-server的组件抓取，它类似于当今 Heapster 的精简版。metrics-server 仅在本地存储最新值并且没有接收器。metrics-server 公开主指标 API。（此处描述的配置类似于当前&amp;quot;独立&amp;quot;模式下的 Heapster。） 发现汇总器使主指标 API 可用于外部客户端，因此从客户端的角度来看，它看起来与访问 API 服务器相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;核心（系统）指标在所有部署环境中都按上述方式处理。唯一容易替换的部分是资源估计器，理论上，它可以由高级用户替换。metric-server 本身也可以被替换，但它类似于替换 apiserver 本身或可能与替换controller-manager类似，但不推荐也不支持。&lt;/p&gt;
&lt;p&gt;最终，核心指标管道也可能从 Kubelet 和 Docker 守护进程本身收集指标（例如 Kubelet 的 CPU 使用率），即使它们不在容器中运行。&lt;/p&gt;
&lt;p&gt;核心指标管道故意很小，并非为第三方集成而设计。&amp;quot;成熟的&amp;quot;监控留给第三方系统，它们提供监控管道（见下一节）并且可以在 Kubernetes 上运行，而无需对上游组件进行更改。通过这种方式，我们可以消除今天的负担，即维护 Heapster 作为每个可能的指标源、接收器和功能的集成点。&lt;/p&gt;
&lt;h3 id=&#34;基础设施&#34;&gt;基础设施&lt;/h3&gt;
&lt;p&gt;我们将构建一个开源 Infrastore 组件（最有可能重用现有技术），为核心系统指标和事件的历史查询提供服务，它将从主 API 中获取。Infrastore 将公开一个或多个 API（可能只是类似 SQL 的查询——这是待定的）来处理以下用例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始资源&lt;/li&gt;
&lt;li&gt;垂直自动缩放&lt;/li&gt;
&lt;li&gt;旧定时器 API&lt;/li&gt;
&lt;li&gt;用于调试、容量规划等的决策支持查询。&lt;/li&gt;
&lt;li&gt;Kubernetes 仪表板中的使用图表
此外，它可能会收集监控指标和服务指标（至少从 Kubernetes 基础设施容器中），在接下来的部分中进行了描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;监控管道&#34;&gt;监控管道&lt;/h2&gt;
&lt;p&gt;如上一节所述，为核心指标构建专用指标管道的目标之一是允许单独的监控管道，该管道非常灵活，因为核心 Kubernetes 组件不需要依赖它。默认情况下，我们不会提供但我们会提供一种简单的安装方法（使用单个命令，最有可能使用 Helm）。我们在本节中描述了监控管道。&lt;/p&gt;
&lt;p&gt;监控管道收集的数据可能包含以下指标组的任何子集或超集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心系统指标&lt;/li&gt;
&lt;li&gt;非核心系统指标&lt;/li&gt;
&lt;li&gt;来自用户应用程序容器的服务指标&lt;/li&gt;
&lt;li&gt;来自 Kubernetes 基础设施容器的服务指标；这些指标使用 Prometheus 检测公开
由监控解决方案决定收集哪些数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了支持基于自定义指标的HPA，监控管道的提供者还必须创建一个无状态 API 适配器，从监控管道中提取自定义指标并将它们公开给 HPA。此类 API 将是一个定义明确的版本化 API，类似于常规 API。该组件的详细设计文档将介绍如何公开或发现它的详细信息。&lt;/p&gt;
&lt;p&gt;如果希望在 Infrastore 中提供监控管道指标，则应用相同的方法。这些适配器可以是独立的组件、库或监控解决方案本身的一部分。&lt;/p&gt;
&lt;p&gt;有许多可能的节点和集群级代理组合可以构成监控管道，包括 cAdvisor + Heapster + InfluxDB（或任何其他接收器）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cAdvisor + collectd + Heapster&lt;/li&gt;
&lt;li&gt;cAdvisor + Prometheus&lt;/li&gt;
&lt;li&gt;snapd + Heapster&lt;/li&gt;
&lt;li&gt;snapd + SNAP 集群级代理&lt;/li&gt;
&lt;li&gt;Sysdig
作为示例，我们将描述与 cAdvisor + Prometheus 的潜在集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheus 在一个节点上有以下指标来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自 cAdvisor 的核心和非核心系统指标&lt;/li&gt;
&lt;li&gt;容器通过 Prometheus 格式的 HTTP 处理程序公开的服务指标&lt;/li&gt;
&lt;li&gt;[可选] 节点导出器（Prometheus 组件）中有关节点本身的指标
所有这些都由 Prometheus 集群级代理轮询。我们可以使用 Prometheus 集群级代理作为水平 pod 自动缩放自定义指标的来源，通过使用独立 API 适配器在 Prometheus 集群级代理上的 Prometheus 查询语言端点和特定于 HPA 的 API 之间进行代理/转换。同样，适配器可用于在 Infrastore 中提供来自监控管道的指标。如果用户不需要相应的功能，则不需要任何适配器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装 cAdvisor+Prometheus 的命令还应该自动设置从基础设施容器收集指标。这是可能的，因为基础设施容器的名称和感兴趣的指标是 Kubernetes 控制平面配置本身的一部分，并且因为基础设施容器以 Prometheus 格式导出它们的指标。&lt;/p&gt;
&lt;h1 id=&#34;附录-架构图&#34;&gt;附录： 架构图&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://www.geekgame.site/static/k8s/monitoring_architecture.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;原文&#34;&gt;原文&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/monitoring_architecture.md&#34;&gt;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/instrumentation/monitoring_architecture.md&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Kubernetes Controller runtime 详解</title>
      <link>https://www.geekgame.site/post/k8s/extensions/controller_runtime/</link>
      <pubDate>Thu, 17 Jun 2021 13:40:20 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/extensions/controller_runtime/</guid>
      <description>
        
          &lt;p&gt;controller-runtime(&lt;a href=&#34;https://github.com/kubernetes-sigs/controller-runtime&#34;&gt;https://github.com/kubernetes-sigs/controller-runtime&lt;/a&gt;) 框架是社区封装的一个控制器处理的框架，Kubebuilder、Operator-sdk 这两个框架也是基于controller-runtime做了一层封装，目的是快速生成operator项目代码。下面我们就来具体分析一下下 controller-runtime 原理以及实现 。&lt;/p&gt;
&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CRD:
自定义资源(CustomResourceDefinition), K8s允许你定义自己的定制资源，K8s API 负责为你的定制资源提供存储和访问服务。&lt;br&gt;
下面例子是定义了一个crontab 的自定义资源:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiextensions.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CustomResourceDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 名字必需与下面的 spec 字段匹配，并且格式为 &amp;#39;&amp;lt;名称的复数形式&amp;gt;.&amp;lt;组名&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;crontabs.stable.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 组名称，用于 REST API: /apis/&amp;lt;组&amp;gt;/&amp;lt;版本&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;stable.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 列举此 CustomResourceDefinition 所支持的版本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;versions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 每个版本都可以通过 served 标志来独立启用或禁止&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;served&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 其中一个且只有一个版本必需被标记为存储版本&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;openAPIV3Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cronSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 可以是 Namespaced 或 Cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespaced&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 名称的复数形式，用于 URL：/apis/&amp;lt;组&amp;gt;/&amp;lt;版本&amp;gt;/&amp;lt;名称的复数形式&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plural&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;crontabs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 名称的单数形式，作为命令行使用时和显示时的别名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;singular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;crontab&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# kind 通常是单数形式的驼峰编码（CamelCased）形式。你的资源清单会使用这一形式。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CronTab&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# shortNames 允许你在命令行使用较短的字符串来匹配资源&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shortNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GVK GVR: GVK是 Group Version Kind 的缩写，GVR 是 Group Version Resource 的缩写&lt;br&gt;
Group: ApiGroup,是相关API功能的集合。&lt;br&gt;
Version: ApiGroup的版本， 每个ApiGroup可以对应多个版本。&lt;br&gt;
Kind：资源类型。
Resource：资源，Kind的具象化，类似于面向对象语言中的类与对象，Kind就是类，Resource就是对象。&lt;/p&gt;
&lt;p&gt;那么在创建 CRD 后，我们如何向 K8s 创建具体资源呢？我们只需要定义一个 yaml 文件，里面指明 GVK 就可以了，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# group/version: group 是 stable.example.com， version 是 v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;stable.example.com/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CronTab  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-new-cron-object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cronSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;* * * * */5&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-awesome-cron-image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema: 定义了资源序列化和反序列化的方法以及资源类型和版本的对应关系,可以根据GVK找到Go Type, 也可以通过Go Type找到GVK。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Informer机制&lt;br&gt;
Kubernetes的其他组件都是通过client-go(K8s系统使用client-go作为Go语言的官方编程式交互客户端库,提供对 K8s API Server服务的交互访问)的Informer机制与Kubernetes API Server进行通信的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clients
提供访问API对象的客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Caches
默认情况下客户端从本地缓存读取对象。缓存将自动缓存需要Watch的对象，同时也会缓存其他被请求的结构化对象。Cache内部是通过Informer负责监听对应 GVK 的 GVR 的创建/删除/更新操作,然后通知所有 Watch 该 GVK 的 Controller, Controller 将对应的资源名称添加到 Queue 里面,最终触发 Reconciler 的调协。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Managers&lt;br&gt;
Controller runtime抽象的最外层的管理对象，负责管理 Controller、Caches、Client，以及 leader 选举。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controllers&lt;br&gt;
控制器响应事件(Create/Update/Delete)来触发调协(reconcile)请求,与要实现的调协逻辑一一对应，会创建限速Queue, 一个 Controller 可以关注很多 GVK,然后根据 GVK 到 Cache 里面找到对应的 Share Informer 去 Watch 资源,Watch 到的事件会加入到 Queue里面, Queue 最终触发开发者的 Reconciler 的调和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reconcilers&lt;br&gt;
开发者主要实现的逻辑，用来接收Controller的GVK事件，然后获取GVR 进行协调并决定是否更新或者重新入队。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;整体设计&#34;&gt;整体设计&lt;/h1&gt;
&lt;p&gt;Controller-runtime设计图如下所示：
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/controller_runtime.jpg&#34; alt=&#34;&#34;&gt;
controller 的整理流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先会初始化Schema, 注册原生资源以及自定义资源;&lt;/li&gt;
&lt;li&gt;创建并初始化manager，将schema传入，并在内部初始化cache和client等其他资源;&lt;/li&gt;
&lt;li&gt;创建并初始化 Reconciler, 传入 client 和 schema&lt;/li&gt;
&lt;li&gt;将 Reconciler 注册到 manager，并创建controller 与 Reconciler 绑定;&lt;/li&gt;
&lt;li&gt;Controller Watch 自定义资源，此时 controller 会从 Cache 里面去获取 Share Informer,如果没有则创建,然后对该 Share Informer 进行 Watch,将得到的资源的名字和 Namespace存入到Queue中；&lt;/li&gt;
&lt;li&gt;Controller 不断获取 Queue 中的数据并调用 Reconciler 进行调协；&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34;&gt;1. 定制资源&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://jishuin.proginn.com/p/763bfbd2f5b9&#34;&gt;2. controller-runtime 之控制器实现&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://my.oschina.net/u/4657223/blog/4792083&#34;&gt;3. 还在手写 Operator?是时候使用 Kubebuilder 了&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Kubernetes 扩展</title>
      <link>https://www.geekgame.site/post/k8s/extensions/extend/</link>
      <pubDate>Tue, 08 Jun 2021 16:18:40 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/extensions/extend/</guid>
      <description>
        
          &lt;p&gt;Kubernetes 是Google开源的容器编排项目，是云原生时代最成功的项目之一，其本身也是高度可配置且可扩展的，这就可以让我们利用扩展开发出符合我们业务逻辑的软件，本文就其扩展展开讨论。&lt;/p&gt;
&lt;h1 id=&#34;kubernetes-扩展点&#34;&gt;Kubernetes 扩展点&lt;/h1&gt;
&lt;p&gt;Kubernetes 在官网给出了7个扩展点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubectl扩展: 以 kubectl- 开头的可执行文件，需要注意两点：
&lt;ul&gt;
&lt;li&gt;变量传递：所有环境变量也按原样传递给可执行文件；&lt;/li&gt;
&lt;li&gt;命令最长匹配：插件机制总是为给定的用户命令选择尽可能长的插件名称;&lt;/li&gt;
&lt;li&gt;影响范围： 只对本地环境造成影响；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API访问扩展：请求到达API服务时都会经过：认证、鉴权、准入控制这几个阶段，API访问扩展就是对这几个阶段进行扩展,使用户可以对请求执行身份认证、基于其内容阻止请求、编辑请求内容、处理删除操作等等。&lt;/li&gt;
&lt;li&gt;自定义资源：Kubernetes 内部有很多内置资源：Pods、Services、Deployments等等，这些资源有时满足不了我们的实际需求，此时我们可以定义满足业务需求的资源（CRD），自定义资源一般与自定义控制器结合使用。&lt;/li&gt;
&lt;li&gt;调度器扩展：Kubernetes 调度器负责决定 Pod 要放置到哪些节点上执行，我们可以通过实现调度器扩展来实现我们自己的调度策略。&lt;/li&gt;
&lt;li&gt;控制器扩展：一般与自定义资源结合使用，成为 &lt;strong&gt;Operator 模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;网络插件：用来扩展 Pod 网络的插件。&lt;/li&gt;
&lt;li&gt;存储插件：用来扩展存储的插件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;operator-模式&#34;&gt;Operator 模式&lt;/h1&gt;
&lt;p&gt;自定义资源和控制器组成了 Operator 模式。在该模式下可以让你自动化完成应用部署、管理。&lt;br&gt;
在 Kubernetes 中，Operator 是一个软件扩展，它利用自定义资源来管理应用程序及其组件。Operator 是 Kubernetes API 的客户端，用于控制自定义资源。Operator 是特定于应用程序的控制器，用于管理自定义资源的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Operator 可以自动化的事情包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按需部署应用&lt;/li&gt;
&lt;li&gt;获取/还原应用状态的备份&lt;/li&gt;
&lt;li&gt;处理应用代码的升级以及相关改动。例如，数据库 schema 或额外的配置设置&lt;/li&gt;
&lt;li&gt;发布一个 service，要求不支持 Kubernetes API 的应用也能发现它&lt;/li&gt;
&lt;li&gt;模拟整个或部分集群中的故障以测试其稳定性&lt;/li&gt;
&lt;li&gt;在没有内部成员选举程序的情况下，为分布式应用选择首领角色&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;控制器-reconcile-loop&#34;&gt;控制器 Reconcile loop&lt;/h1&gt;
&lt;p&gt;控制器与资源关联，并监听资源的变化，如果资源发生变化，则会进入一个循环即调协循环(Reconcile loop)，伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;expectState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetExpectState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;actualState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetActualState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expectState&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;actualState&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// do nothing
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// adjust the state to the expect state
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调协循环(Reconcile loop) 是通过事件驱动和定时执行来实现，不断对比实际状态与期望状态，并不断调整实际状态向实际状态靠拢。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;Kubernetes 提供了7个扩展点, 其中自定义资源和控制器组成了 Operator 模式，Operator 的工作原理,实际上是利用了 Kubernetes 的自定义 API 资源(CRD),来描述我们想要部署的应用;然后在自定义控制器里,根据自定义 API 对象的变化,来完成具体的部署和运维工作,其中控制的调协循环更是编排的核心。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://krvarma.medium.com/extending-kubernetes-part-1-custom-operator-b6745c42be4f&#34;&gt;Extending Kubernetes — Part 1 — Custom Operator&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/extend-kubernetes/#user-defined-types&#34;&gt;扩展 Kubernetes&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://trstringer.com/extending-k8s-custom-controllers/&#34;&gt;Extending Kubernetes - Create Controllers for Core and Custom Resources&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Kubebuilder 使用教程</title>
      <link>https://www.geekgame.site/post/k8s/extensions/kubebuilder/</link>
      <pubDate>Tue, 08 Jun 2021 16:18:16 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/extensions/kubebuilder/</guid>
      <description>
        
          &lt;h1 id=&#34;kubebuilder-是什么&#34;&gt;Kubebuilder 是什么&lt;/h1&gt;
&lt;p&gt;kubebuilder 是使用自定义资源（CRD）构建 Kubernetes API 的框架。Kubebuilder提高了开发人员在Go中快速构建和发布Kubernetes api的速度，降低了开发管理的复杂性。&lt;/p&gt;
&lt;h1 id=&#34;kubebuilder-如何使用&#34;&gt;Kubebuilder 如何使用&lt;/h1&gt;
&lt;p&gt;我们通过向 Kubernetes 集群添加一个自定义 Cluster 来了解 Kubebuilder 如何使用。
其主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个项目&lt;/li&gt;
&lt;li&gt;创建一个API&lt;/li&gt;
&lt;li&gt;定义CRD&lt;/li&gt;
&lt;li&gt;实现controller&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建目录ipes-cmp 并进入执行 go mod init ipes-cmp 来告诉 kubebuilder 和 Go module 的基本导入路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 kubebuilder init 命令，初始化一个新项目。示例如下。
kubebuilder init --domain ipes-cmp&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;--domain&lt;/strong&gt;: 项目的域名&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建一个api&#34;&gt;创建一个API&lt;/h2&gt;
&lt;p&gt;运行下面的命令，创建一个新的 API（组/版本）为 “cluster/v1”，并在上面创建新的 Kind(CRD) “Cluster”。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;   kubebuilder create api --group cluster --version v1 --kind Cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目录结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;在 Create Resource [y/n] 和 Create Controller [y/n] 中按y，创建文件 api/v1/cluster_types.go ，
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;该文件中定义相关 API ，而针对于这一类型 (CRD) 的对账业务逻辑生成在 controller/cluster_controller.go 文件中。
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;.
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;├── Dockerfile
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;├── Makefile       # 这里定义了很多脚本命令，例如运行测试，开始执行等
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;├── PROJECT    # 这里是 kubebuilder 的一些元数据信息
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;├── api
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;│   └── v1
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;│       ├── cluster_types.go   #定义 Spec 和 Status
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;│       ├── groupversion_info.go  # 包含了关于 group-version 的一些元数据
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;│       └── zz_generated.deepcopy.go
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;├── bin
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;│   └── controller-gen
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;├── config
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;│   ├── crd   # 部署 crd 所需的 yaml, 自动生成, 只需要修改了 v1 中的 go 文件之后执行 make generate 即可
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;│   │   ├── kustomizeconfig.yaml
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;│   │   └── patches
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;│   │       ├── cainjection_in_clusters.yaml
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;│   │       └── webhook_in_clusters.yaml
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;│   ├── default     # 一些默认配置
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;│   │   ├── manager_auth_proxy_patch.yaml
&lt;span class=&#34;ln&#34;&gt;25&lt;/span&gt;│   │   └── manager_config_patch.yaml
&lt;span class=&#34;ln&#34;&gt;26&lt;/span&gt;│   ├── manager
&lt;span class=&#34;ln&#34;&gt;27&lt;/span&gt;│   │   ├── controller_manager_config.yaml
&lt;span class=&#34;ln&#34;&gt;28&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;29&lt;/span&gt;│   │   └── manager.yaml
&lt;span class=&#34;ln&#34;&gt;30&lt;/span&gt;│   ├── prometheus   # 监控指标数据采集配置
&lt;span class=&#34;ln&#34;&gt;31&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;32&lt;/span&gt;│   │   └── monitor.yaml
&lt;span class=&#34;ln&#34;&gt;33&lt;/span&gt;│   ├── rbac   # 部署所需的 rbac 授权 yaml
&lt;span class=&#34;ln&#34;&gt;34&lt;/span&gt;│   │   ├── auth_proxy_client_clusterrole.yaml
&lt;span class=&#34;ln&#34;&gt;35&lt;/span&gt;│   │   ├── auth_proxy_role.yaml
&lt;span class=&#34;ln&#34;&gt;36&lt;/span&gt;│   │   ├── auth_proxy_role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;37&lt;/span&gt;│   │   ├── auth_proxy_service.yaml
&lt;span class=&#34;ln&#34;&gt;38&lt;/span&gt;│   │   ├── cluster_editor_role.yaml
&lt;span class=&#34;ln&#34;&gt;39&lt;/span&gt;│   │   ├── cluster_viewer_role.yaml
&lt;span class=&#34;ln&#34;&gt;40&lt;/span&gt;│   │   ├── kustomization.yaml
&lt;span class=&#34;ln&#34;&gt;41&lt;/span&gt;│   │   ├── leader_election_role.yaml
&lt;span class=&#34;ln&#34;&gt;42&lt;/span&gt;│   │   ├── leader_election_role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;43&lt;/span&gt;│   │   ├── role_binding.yaml
&lt;span class=&#34;ln&#34;&gt;44&lt;/span&gt;│   │   └── service_account.yaml
&lt;span class=&#34;ln&#34;&gt;45&lt;/span&gt;│   └── samples  # 这里是 crd 示例文件，可以用来部署到集群当中
&lt;span class=&#34;ln&#34;&gt;46&lt;/span&gt;│       └── cluster_v1_cluster.yaml
&lt;span class=&#34;ln&#34;&gt;47&lt;/span&gt;├── controllers
&lt;span class=&#34;ln&#34;&gt;48&lt;/span&gt;│   ├── cluster_controller.go
&lt;span class=&#34;ln&#34;&gt;49&lt;/span&gt;│   └── suite_test.go
&lt;span class=&#34;ln&#34;&gt;50&lt;/span&gt;├── go.mod
&lt;span class=&#34;ln&#34;&gt;51&lt;/span&gt;├── go.sum
&lt;span class=&#34;ln&#34;&gt;52&lt;/span&gt;├── hack
&lt;span class=&#34;ln&#34;&gt;53&lt;/span&gt;│   └── boilerplate.go.txt
&lt;span class=&#34;ln&#34;&gt;54&lt;/span&gt;└── main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;定义crd&#34;&gt;定义CRD&lt;/h2&gt;
&lt;p&gt;修改 cluster_type.go 文件添加地域信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ClusterSpec defines the desired state of Cluster
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ClusterSpec&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Important: Run &amp;#34;make&amp;#34; to regenerate code after modifying this file
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Foo is an example field of Cluster. Edit cluster_types.go to remove/update
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;foo,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Region represents the region of the member cluster locate in.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// +optional
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Region&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;region,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完之后执行 make manifests generate ，可以生成对应的config/bases/cluster.ipes.io_clusters.yaml文件。可以看到spec信息如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;  spec:
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    description: ClusterSpec defines the desired state of Cluster
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    properties:
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;      foo:
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;        description: Foo is an example field of Cluster. Edit cluster_types.go
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;          to remove/update
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;        type: string
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;      region:
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;        description: Region represents the region of the member cluster locate
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;          in.
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;        type: string
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    type: object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;实现controller&#34;&gt;实现controller&lt;/h1&gt;
&lt;p&gt;controller的逻辑框架kubebuilder已经帮我们完成，我们只需要完成最核心的函数 &lt;em&gt;Reconcile&lt;/em&gt;即可；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;controllers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cluser_controller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ClusterReconciler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Reconcile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里我们获取cluster信息并打印&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ClusterReconciler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Reconcile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithValues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clusterv1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TODO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NamespacedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// The resource may no longer exist, in which case we stop processing.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;apierrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Requeue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// your logic here
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ipes cluster status change&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;region&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;h3 id=&#34;部署crd资源&#34;&gt;部署CRD资源&lt;/h3&gt;
&lt;p&gt;我们在实现了controller 的核心逻辑之后， 需要先将CRD注册到集群中, 具体命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里make install ; 是执行了以下两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;make manifests  # 生成CRD资源&lt;/li&gt;
&lt;li&gt;bin/kustomize build config/crd | kubectl apply -f - #生成部署CRD， 并部署到集群中
如果集群不在本地， 可以分开执行这两步。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行-controller&#34;&gt;运行 controller&lt;/h3&gt;
&lt;p&gt;本地直接执行 make run 即可，我这里需要编译后，放到服务器上执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;➜  ~ ./ipes-cmp
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;2021-06-08T19:22:38.187+0800	INFO	controller-runtime.metrics	metrics server is starting to listen	{&amp;#34;addr&amp;#34;: &amp;#34;:8080&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	setup	starting manager
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	controller-runtime.manager	starting metrics server	{&amp;#34;path&amp;#34;: &amp;#34;/metrics&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;2021-06-08T19:22:38.188+0800	INFO	controller-runtime.manager.controller.cluster	Starting EventSource	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;kind source: /, Kind=&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;2021-06-08T19:22:38.289+0800	INFO	controller-runtime.manager.controller.cluster	Starting Controller	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;}
&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;2021-06-08T19:22:38.289+0800	INFO	controller-runtime.manager.controller.cluster	Starting workers	{&amp;#34;reconciler group&amp;#34;: &amp;#34;cluster.ipes.io&amp;#34;, &amp;#34;reconciler kind&amp;#34;: &amp;#34;Cluster&amp;#34;, &amp;#34;worker count&amp;#34;: 1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;添加一个测试例子&#34;&gt;添加一个测试例子&lt;/h3&gt;
&lt;p&gt;创建一个测试的集群&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster.ipes.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Add fields here&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;beijing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;kubectl apply -f bj_cluster.yml # 部署测试集群
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到controller 输入日志，controller已经获取到关于cluster的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2021-06-08T19:35:49.562&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;+0800&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;INFO	controllers.Cluster	ipes cluster status change	{&amp;#34;name&amp;#34;: &amp;#34;test-cluster&amp;#34;, &amp;#34;region&amp;#34;: &amp;#34;beijing&amp;#34;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;目前扩展 Kubernetes 的 API 的方式有创建 CRD、使用 Operator SDK 等方式，都需要写很多的样本文件（boilerplate），使用起来十分麻烦。为了能够更方便构建 Kubernetes API 和工具，就需要一款能够事半功倍的工具，与其他 Kubernetes API 扩展方案相比，kubebuilder 更加简单易用，并获得了社区的广泛支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.aliyun.com/article/719215&#34;&gt;深入解析 Kubebuilder：让编写 CRD 变得更简单&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://cloudnative.to/kubebuilder/quick-start.html&#34;&gt;Kubebuilder&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.bookstack.cn/read/kubernetes-handbook-201910/develop-kubebuilder.md&#34;&gt;Kubernetes中文指南/云原生应用架构实践手册(201910)&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>kubernetes 架构</title>
      <link>https://www.geekgame.site/post/k8s/k8s/</link>
      <pubDate>Thu, 31 Oct 2019 15:26:32 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/k8s/</guid>
      <description>
        
          &lt;h1 id=&#34;什么是-kubernetes&#34;&gt;什么是 Kubernetes&lt;/h1&gt;
&lt;p&gt;Kubernetes(简称K8s) 是由 Google 在2014年开源的容器编排与调度管理框架，主要是为用户提供一个具有普遍意义的容器编排工具。该项目是Google内部大规模集群管理系统-Borg的一个开源版本，目前是由CNCF(Cloud Native Computing Foundation)托管项目。
Kubernetes 的主要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可扩展：Kubernetes 是高度可配置且可扩展的。&lt;/li&gt;
&lt;li&gt;可移植：Kubernetes 不限于特定平台，可以在各种公共或者私有云平台上运行。&lt;/li&gt;
&lt;li&gt;自动化：Kubernetes 是一个高度自动化的平台：可自动部署/回滚、自我修复、自动扩缩容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;kubernetes-架构&#34;&gt;Kubernetes 架构&lt;/h1&gt;
&lt;p&gt;K8s 遵循服务器/客户端(C/S)架构,分为两部分master和node，其中master是服务端，是控制节点主要控制和管理整个K8s集群;node是客户端,是工作节点，主要处理来自于master的任务。K8s可以设置多master来实现高可用，但是默认情况下单个master 就可以完成所有的工作。&lt;br&gt;
master包含的组件有：kube-apiserver, etcd, kube-controller-manager, kube-scheduler, cloud-controller-manager; &lt;br&gt;
node 包含的组件有: kubelet, kube-proxy;&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/Kubernetes-101-Architecture-Diagram-768x555.jpeg&#34; alt=&#34;带有两个Worker nodes和一个master的K8s架构图&#34;&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;master-组件&#34;&gt;master 组件&lt;/h2&gt;
&lt;p&gt;kube-apiserver: 提供集群HTTP REST API, 是集群控制的唯一入口,提供访问控制、注册、信息存储功能, 同时也是集群内部模块之间数据交换的枢纽。 &lt;br&gt;
etcd:  兼具一致性和高可用性的键值数据库,保存 K8s 所有集群数据;&lt;br&gt;
kube-scheduler:  对K8s中的Pod资源进行监控调度，为Pod选择合适的工作节点； &lt;br&gt;
kube-controller-manager: K8s实现自动化的关键组件，是集群中所有资源的自动化控制中心；&lt;br&gt;
cloud-controller-manager: 云控制器管理器是指嵌入特定云的控制逻辑的控制平面组件,使得 K8s 可以直接利用云平台实现持久化卷、负载均衡、网络路由、DNS 解析以及横向扩展等功能。&lt;/p&gt;
&lt;h2 id=&#34;node-组件&#34;&gt;node 组件&lt;/h2&gt;
&lt;p&gt;kubelet: 负责与master节点通信，处理master下发的任务，管理节点上容器的创建、停止与删除等; &lt;br&gt;
kube-proxy: 负责K8s集群服务的通信以及负载均衡；&lt;/p&gt;
&lt;h1 id=&#34;数据流转&#34;&gt;数据流转&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/k8s_data.png&#34; alt=&#34;K8s 数据流转&#34;&gt;
我们以 ReplicaSet 为例，讲述一下K8s的数据流转：&lt;br&gt;
0. 在集群组件一启动 kube-scheduler，kube-controller-manager，kubelet就会通过list-watch机制监听自己关心的事件；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;API作为集群入口，接收命令请求；&lt;/li&gt;
&lt;li&gt;API 与 ETCD交互，持久化 ReplicaSet;&lt;/li&gt;
&lt;li&gt;Etcd将 ReplicaSet 的创建事件发送给API;&lt;/li&gt;
&lt;li&gt;API 将 ReplicaSet 的创建事件发送给正在监听的 kube-controller-manager;&lt;/li&gt;
&lt;li&gt;kube-controller-manager 接收事件并创建Pod 发送给 API；&lt;/li&gt;
&lt;li&gt;API 与 etcd 交互持久化Pod;&lt;/li&gt;
&lt;li&gt;etcd 将Pod创建事件发送给 API；&lt;/li&gt;
&lt;li&gt;API 将Pod创建事件发送给 kube-scheduler;&lt;/li&gt;
&lt;li&gt;kube-scheduler 接收Pod事件并为Pod 选择合适的节点，并将更新信息发送给API;&lt;/li&gt;
&lt;li&gt;API 与 etcd 交互更新Pod;&lt;/li&gt;
&lt;li&gt;etcd 将Pod更新事件发送给 API；&lt;/li&gt;
&lt;li&gt;API 将Pod信息发送给 Kubelet;&lt;/li&gt;
&lt;li&gt;Kubelet 接收到 Pod, 真正去创建Pod；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;观察pod创建过程相关事件&#34;&gt;观察POD创建过程相关事件&lt;/h2&gt;
&lt;p&gt;我们可以通过kubectl get events --watch 来观察POD创建过程所产生的事件。使用watch 选项可以监听整个过程。
以下是创建nginx的过程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;➜  ~ kubectl get events --watch       
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;LAST SEEN   TYPE     REASON    OBJECT                                  MESSAGE
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;0s          Normal   ScalingReplicaSet   deployment/nginx                        Scaled up replica &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; nginx-6799fc88d8 to &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;0s          Normal   SuccessfulCreate    replicaset/nginx-6799fc88d8             Created pod: nginx-6799fc88d8-dlvsf
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;0s          Normal   SuccessfulCreate    replicaset/nginx-6799fc88d8             Created pod: nginx-6799fc88d8-b7868
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;0s          Normal   Scheduled           pod/nginx-6799fc88d8-dlvsf              Successfully assigned default/nginx-6799fc88d8-dlvsf to k8s-node1
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;0s          Normal   Scheduled           pod/nginx-6799fc88d8-b7868              Successfully assigned default/nginx-6799fc88d8-b7868 to k8s-node1
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;0s          Normal   Pulling             pod/nginx-6799fc88d8-b7868              Pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;0s          Normal   Pulling             pod/nginx-6799fc88d8-dlvsf              Pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;0s          Normal   Pulled              pod/nginx-6799fc88d8-b7868              Successfully pulled image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt; in 14.134421496s
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;0s          Normal   Created             pod/nginx-6799fc88d8-b7868              Created container nginx
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;0s          Normal   Started             pod/nginx-6799fc88d8-b7868              Started container nginx
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;0s          Normal   Pulled              pod/nginx-6799fc88d8-dlvsf              Successfully pulled image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt; in 19.163499736s
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;0s          Normal   Created             pod/nginx-6799fc88d8-dlvsf              Created container nginx
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;0s          Normal   Started             pod/nginx-6799fc88d8-dlvsf              Started container nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上就是关于K8s架构以及数据流转的介绍。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aquasec.com/cloud-native-academy/kubernetes-101/kubernetes-architecture/&#34;&gt;Kubernetes Architecture&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;INTRODUCTION TO KUBERNETES ARCHITECTURE&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/services-networking/service/&#34;&gt;服务&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://dockone.io/article/4884&#34;&gt;Kubernetes的三种外部访问方式：NodePort、LoadBalancer 和 Ingress&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;&#34;&gt;极客时间&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
