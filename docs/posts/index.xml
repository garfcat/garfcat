<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on garfcat</title>
    <link>http://www.geekgame.site/posts/</link>
    <description>Recent content in Posts on garfcat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Jun 2019 16:41:11 +0800</lastBuildDate>
    
	<atom:link href="http://www.geekgame.site/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang 栈结构</title>
      <link>http://www.geekgame.site/posts/language/golang/plan9/</link>
      <pubDate>Sat, 15 Jun 2019 16:41:11 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/plan9/</guid>
      <description>程序组成 程序由代码和数据组成，数据又有静态与动态之分；
动态数据：存放在堆区和栈区；
静态数据：静态只读数据可以放在代码区，也可以放在特定的只读数据区；
可读写的已初始化的静态数据放在数据区，可读写的未初始化的静态数据放在bss区；
寄存器 伪寄存器  FP(Frame pointer): 表示参数以及返回值的基地址； 通过 SYMBOL+/-ffset(FP) PC(Program counter): 跳转寄存器，存储下一条指令地址； SB(Static base pointer): 全局静态起始地址.
 SP(Stack pointer): 表示本地变量的起始地址；
使用方式 symbol + offset(SP), 例如第一个变量 local0 + (0)SP , local0 只是定义一个符号，类似于 local0 := xxxx  这个四个伪寄存器在golang 汇编中经常被用到，尤其是SB和FP；
SB 全局静态起始地址, foo(SB)表示foo在内存中的地址。这个语法有两个修饰符&amp;lt;&amp;gt; 和 +N，其中N是一个整数。 foo&amp;lt;&amp;gt;(SB)表示foo是一个私有元素只能在 当前文件中可见，就像是golang 首字母小写的变量或者函数。foo+8(SB)表示相对于foo 8字节的内存地址；注意 这里是相对符号的地址
FP 用来引用程序的参数，这些引用是由编译器维护，通过该寄存器的偏移量来引用参数。在64位的机器上，0(FP)表示第一个参数，8(FP)表示第二个参数等等。为了程序的清晰与可读性，编译器强制在引用参数时使用名称。
FP、 伪SP、 硬件SP之间的关系 SP分为伪SP和硬件寄存器SP，在栈桢为0的情况下 伪SP与硬件寄存器SP相等。可以使用有无symbol来区分是哪个寄存器： 有symbol 例如 foo-8(SP)表示伪寄存器，8(SP)表示硬件寄存器。
栈结构 无参数无本地变量 无参数无本地变量栈结果是如下所示
通过如下函数来验证
#include &amp;quot;textflag.h&amp;quot; // TEXT ·SpFp(SB),NOSPLIT,$0-32 LEAQ (SP), AX // 将硬件SP地址存储到AX LEAQ a+0(SP), BX // 将伪SP地址存储到BX LEAQ b+0(FP), CX // 将FP地址存储到CX MOVQ AX, ret+0(FP) // 将AX地址存储到第一个返回值 MOVQ BX, ret+8(FP) // 将BX地址存储到第二个返回值 MOVQ CX, ret+16(FP) // 将CX地址存储到第三个返回值 MOVQ a+0(SP), AX // 将SP 存储的值存储到AX， 也就是该函数的返回值 MOVQ AX, ret+24(FP) //将AX 放到第四个返回值 RET  package main import &amp;quot;fmt&amp;quot; func SpFp() (int, int, int, int) // 汇编函数声明 func main() { a,b,c, addr := SpFp() fmt.</description>
    </item>
    
    <item>
      <title>Go module</title>
      <link>http://www.geekgame.site/posts/language/golang/module/</link>
      <pubDate>Thu, 30 May 2019 17:12:47 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/module/</guid>
      <description>Go module Go module 是golang最新的包管理工具，可以使依赖包版本信息更明确与可控。module 是关于Go packages的集合，存储在根目录下的go.mod文件中，go.mod 定义了模块的模块路径以及模块的依赖属性，依赖属性包含模块路径以及特定寓意的版本信息。
需要注意的是：在Go 1.13之前go module 在GOPATH下是默认不开启的，这是为了兼容的需要，如果需要使用go module可以在GOPATH/src外的路径创建go.mod文件。
本文会介绍Go module的一些基本用法；
 创建一个模块
 添加一个依赖
 升级依赖
 其他命令  创建一个模块 如前文所说在GOPATH外的创建一个目录，例如 ～/gomod/hello;
执行一下子命令
~/gomod/hello$ go mod init example.com/hello go: creating new go.mod: module example.com/hello  创建hello.go
package hello func Hello()string { return &amp;quot;Hello, world.&amp;quot; }  为使用SayHi,创建test文件 hello_test.go
package hello import &amp;quot;testing&amp;quot; func TestHello(t *testing.T) { want := &amp;quot;Hello, world.&amp;quot; if got := Hello(); got !</description>
    </item>
    
    <item>
      <title>高效shell</title>
      <link>http://www.geekgame.site/posts/shell/effective_shell/</link>
      <pubDate>Thu, 16 May 2019 19:34:57 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/shell/effective_shell/</guid>
      <description> shell 使用超强组合 oh-my-zsh + zsh-autosuggestions + z - jump around。
 oh-my-zsh : 目前非常火的终端配置，只需要简单下载到本地，就可以使用；
 autosuggestions: 补全已经输入过的命令； jump around : 感觉这个非常有用，在目录的跳转之间节省大量的时间；  命令  hstr: 查找历史命令，比Ctrl+R 方便太多，如果使用zsh 需要执行hstr &amp;ndash;show-configuration &amp;gt;&amp;gt; ~/.zshrc , source ~/.zshrc ；
 htop: 加强版的top, 安装与介绍可以看一下这里  </description>
    </item>
    
    <item>
      <title>MQTT 基本概念</title>
      <link>http://www.geekgame.site/posts/protocol/mqtt/</link>
      <pubDate>Wed, 15 May 2019 13:24:24 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/protocol/mqtt/</guid>
      <description>MQTT 概述 MQTT(Message Queuing Telemetry Transport，消息队列遥测传输协议)是最初由IBM开发的一种基于发布/订阅模式的轻量级通信协议,工作在tcp/ip协议簇上。主要优势是 低开销、低带宽，在lot上应用较为广泛。
MQTT 架构  MQTT 是c/s模型，每个客户端通过tcp连接到服务器(broker)； MQTT 是面向消息的。每个消息都是独立的数据块，对于broker来说是不透明的； 每条消息都会发送到一个地址，这个地址称为主题(topic),订阅主题的每个客户端都会收到发布到该主题上的每条消息；  如下所示： 客户端 A、B、C都连接到一个中间broker;
B、C都订阅topic :dev_info 来获取其他设备的设备信息；
A发布设备信息到topic dev_info，broker 将该消息转发给所有的订阅者即 BC；
主题匹配 mqtt 主题是分层级的，通过／划分层级。如 A/B/G ; 注意在订阅时可以使用通配符，发布时不可以使用通配符；
通配符 + 匹配任何单个主题，# 匹配任意名称任意数量的主题；
例如： A/+/G 可以匹配 A/B/G A/C/G A/D/G 等
A/# 可以配置 A/B/C/D/E/F/G
Qos mqtt 支持三种级别的服务质量:
0: &amp;ldquo;至多一次&amp;rdquo; 并不需要回复确认消息，有可能丢失消息；
1: &amp;ldquo;至少一次&amp;rdquo; 收到报文后会回复确认消息，这样会重复收到消息（如超时回复确认消息情况）；
2: &amp;ldquo;只有一次&amp;rdquo; 通过 publish pubrec pubrel pubcomp 四个状态确认有且只有一次消息被处理，但是网络带宽会增加；
最后遗愿(last will) 提前预定好的消息，当客户端断开连接时，broker 会将该消息发送给所有订阅者的客户端；
持久(retain) topic 设置retain 之后，broker 会保留最后一条retain消息,当client 订阅该topic 时会立刻收到一条retain消息；</description>
    </item>
    
    <item>
      <title>mac  sed 报错</title>
      <link>http://www.geekgame.site/posts/shell/mac%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97/</link>
      <pubDate>Mon, 13 May 2019 12:36:43 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/shell/mac%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97/</guid>
      <description>mac 下使用sed -i 替换命令时 会报错
$sed -i &#39;s/xxxx/yyy/g&#39; test sed: 1: &amp;quot;test&amp;quot;: extra characters at the end of p command  解决方法
sed -i &amp;quot;&amp;quot; &amp;quot;s/XX/YY/g&amp;quot; test  ============================================
sed 用法
sed: illegal option -- - usage: sed script [-Ealn] [-i extension] [file ...] sed [-Ealn] [-i extension] [-e script] ... [-f script_file] ... [file ...] -i 后边需要添加备份文件的后缀名,如果不需要可以使用&amp;quot;&amp;quot;,但是不可以忽略 如 sed -i &amp;quot;.bak&amp;quot; &#39;s/xxxx/yyy/g&#39; test 会将替换后的文本写入test.bak  </description>
    </item>
    
  </channel>
</rss>