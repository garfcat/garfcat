<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on garfcat</title>
    <link>http://www.geekgame.site/tags/go/</link>
    <description>Recent content in go on garfcat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Aug 2019 10:23:01 +0800</lastBuildDate>
    
	<atom:link href="http://www.geekgame.site/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>协程调度原理</title>
      <link>http://www.geekgame.site/posts/language/golang/sched/</link>
      <pubDate>Sun, 11 Aug 2019 10:23:01 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/sched/</guid>
      <description>&lt;p&gt;Go语言 最大的特点是提供简单易用的并发编程,这个并发的执行单元就是goroutine, 这个goroutine 是运行在用户态,并由GO自身来调度。调度器来决定谁来使用CPU资源，谁该让出CPU资源。
本文就来深入探讨一下Go的调度原理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang 启动过程</title>
      <link>http://www.geekgame.site/posts/language/golang/start/</link>
      <pubDate>Thu, 20 Jun 2019 22:51:54 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/start/</guid>
      <description>知其然，也要知其所以然，从今天开始研究golang的底层实现，首先从其启动开始；
找到启动点 1. 写一个hello world. package main import ( &amp;quot;fmt&amp;quot; ) func main() { fmt.Println(&amp;quot;hello world&amp;quot;) }  2.编译后使用gdb找到entry point $ gdb hello ..... file type mach-o-x86-64. Entry point: 0x1052720 0x0000000001001000 - 0x0000000001093074 is .text 0x0000000001093080 - 0x00000000010e19cd is __TEXT.__rodata 0x00000000010e19e0 - 0x00000000010e1ae2 is __TEXT.__symbol_stub1 0x00000000010e1b00 - 0x00000000010e2764 is __TEXT.__typelink 0x00000000010e2768 - 0x00000000010e27d0 is __TEXT.__itablink 0x00000000010e27d0 - 0x00000000010e27d0 is __TEXT.__gosymtab 0x00000000010e27e0 - 0x000000000115c6ff is __TEXT.__gopclntab 0x000000000115d000 - 0x000000000115d158 is __DATA.</description>
    </item>
    
    <item>
      <title>golang 栈结构</title>
      <link>http://www.geekgame.site/posts/language/golang/plan9/</link>
      <pubDate>Sat, 15 Jun 2019 16:41:11 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/plan9/</guid>
      <description>&lt;h1 id=&#34;程序组成&#34;&gt;程序组成&lt;/h1&gt;

&lt;p&gt;程序由代码和数据组成，数据又有静态与动态之分；&lt;br /&gt;
动态数据：存放在堆区和栈区；&lt;br /&gt;
静态数据：静态只读数据可以放在代码区，也可以放在特定的只读数据区；&lt;br /&gt;
可读写的已初始化的静态数据放在数据区，可读写的未初始化的静态数据放在bss区；&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go module</title>
      <link>http://www.geekgame.site/posts/language/golang/module/</link>
      <pubDate>Thu, 30 May 2019 17:12:47 +0800</pubDate>
      
      <guid>http://www.geekgame.site/posts/language/golang/module/</guid>
      <description>Go module Go module 是golang最新的包管理工具，可以使依赖包版本信息更明确与可控。module 是关于Go packages的集合，存储在根目录下的go.mod文件中，go.mod 定义了模块的模块路径以及模块的依赖属性，依赖属性包含模块路径以及特定寓意的版本信息。
需要注意的是：在Go 1.13之前go module 在GOPATH下是默认不开启的，这是为了兼容的需要，如果需要使用go module可以在GOPATH/src外的路径创建go.mod文件。
本文会介绍Go module的一些基本用法；
 创建一个模块
 添加一个依赖
 升级依赖
 其他命令  创建一个模块 如前文所说在GOPATH外的创建一个目录，例如 ～/gomod/hello;
执行一下子命令
~/gomod/hello$ go mod init example.com/hello go: creating new go.mod: module example.com/hello  创建hello.go
package hello func Hello()string { return &amp;quot;Hello, world.&amp;quot; }  为使用SayHi,创建test文件 hello_test.go
package hello import &amp;quot;testing&amp;quot; func TestHello(t *testing.T) { want := &amp;quot;Hello, world.&amp;quot; if got := Hello(); got !</description>
    </item>
    
  </channel>
</rss>