<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sched on 有趣</title>
    <link>https://www.geekgame.site/tags/sched/</link>
    <description>Recent content in sched on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 11 Aug 2019 10:23:01 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/tags/sched/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang 协程调度原理</title>
      <link>https://www.geekgame.site/post/language/golang/sched/</link>
      <pubDate>Sun, 11 Aug 2019 10:23:01 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/language/golang/sched/</guid>
      <description>
        
          &lt;p&gt;Go语言 最大的特点是提供简单易用的并发编程,这个并发的执行单元就是goroutine, 这个goroutine 是运行在用户态,并由GO自身来调度。调度器来决定谁来使用CPU资源，谁该让出CPU资源。
本文就来深入探讨一下Go的调度原理。&lt;/p&gt;
&lt;h1 id=&#34;gmp调度模型&#34;&gt;GMP调度模型&lt;/h1&gt;
&lt;p&gt;Go采用的是GMP调度模型。&lt;/p&gt;
&lt;h2 id=&#34;核心概念&#34;&gt;核心概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;G ：即Goroutine ,使用关键字 go 即可创建一个协程来处理用户程序，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//创建协程来执行函数
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;M ：Machine 系统抽象的线程，代表真正的机器资源，目前最多10000，超过这个数量会panic.&lt;/li&gt;
&lt;li&gt;P ：Process,虚拟处理器，代表goroutine的上下文，用于关联G和M；P的数量可以通过GOMAXPROCS设置，默认为CPU核数；&lt;/li&gt;
&lt;li&gt;本地队列（local queue）: 每个P关联有一个协程队列，该队列就是P的本地队列，新生成的协程放在该队列中，当该队列达到最大数量时，会将该队列的一般协程存入到全局队列中；&lt;/li&gt;
&lt;li&gt;全局队列（global queue）: 当本地队列达到最大数量时，多余的协程就会存在全局队列中；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;调度原理&#34;&gt;调度原理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;     +-------------------- sysmon ---------------//------+ 
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                             |                                                   |
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                             |                                                   |
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                +---+      +---+-------+                   +--------+          +---+---+
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt; go func() ---&amp;gt; | G | ---&amp;gt; | P | local | &amp;lt;=== balance ===&amp;gt; | global | &amp;lt;--//--- | P | M |
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;                +---+      +---+-------+                   +--------+          +---+---+
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                             |                                 |                 | 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                             |      +---+                      |                 |
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                             +----&amp;gt; | M | &amp;lt;--- findrunnable ---+--- steal &amp;lt;--//--+
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                                    +---+ 
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                                      |
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;                                    mstart
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                                      |
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;               +--- execute &amp;lt;----- schedule 
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;               |                      |   
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;               |                      |
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;               +--&amp;gt; G.fn --&amp;gt; goexit --+ 
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上图(来自雨痕GO源码阅读)我们可以看到在新建G时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当使用go 关键字执行函数时，会创建(首先查看P的freelist是否可以复用G，如果不能则新建)一个G(goroutine);&lt;/li&gt;
&lt;li&gt;新创建的G，并不会添加到本地队列，而是添加到P关联的runnext中(runnext是一个指针变量，用来存放G的地址),runnext原来的G被放到本地队列中;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2.1 如果本地队列未满（最大256），则放置到队尾；&lt;/li&gt;
&lt;li&gt;2.2 如果本地队列已满，则将本地队列的一半数量的G和runnext中原来的G存放到全局队列中；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;唤醒或新建M来执行任务。&lt;/li&gt;
&lt;li&gt;进入调度循环&lt;/li&gt;
&lt;li&gt;尽力获取可执行的G，并执行&lt;/li&gt;
&lt;li&gt;清理现场并且重新进入调度循环&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/gmp_pic.png&#34; alt=&#34;调度原理&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行时调度&#34;&gt;运行时调度&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;为公平起见，有1／61的机会首先从全局队列获取到G,如果获取到则执行G;&lt;/li&gt;
&lt;li&gt;如果没有机会从全局队列获取或者没有获取到G，则从P关联的runnext或者本地队列获取： &lt;br&gt;
2.1 如果P的runnext有G，则执行该G；
2.2 如果P的runnext没有G，则从本地队列中获取G；&lt;/li&gt;
&lt;li&gt;如果第二步没有获取到，则执行以下步骤获取：&lt;br&gt;
3.1 从关联P中获取，步骤同2，若获取到返回;&lt;br&gt;
3.2 从全局队列中获取，若获取到返回;&lt;br&gt;
3.3 调用 netpoll()取异步调用结束的G，该调用为非阻塞调用,若获取到则返回一个G，剩余的G放入到全局队列中；&lt;br&gt;
3.4 从其他P中steal一半的G到本地队列,若获取到则返回；&lt;br&gt;
3.5 如果处于垃圾回收标记阶段，则执行垃圾回收操作；&lt;br&gt;
3.6 再次从全局队列中获取，若获取到返回;&lt;br&gt;
3.7 调用 netpoll()取异步调用结束的G，该调用为阻塞调用,若获取到则返回一个G，剩余的G放入到全局队列中；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;协程的状态&#34;&gt;协程的状态&lt;/h3&gt;
&lt;p&gt;在go1.12.5/src/runtime/runtime2.go：15 定义有如下几个状态&lt;br&gt;
_Gidle: 值（0） 刚刚被创建，还没有初始化；&lt;br&gt;
_Grunnable： 值（1） 已经在运行队列中，只是此时没有执行用户代码,未分配栈；&lt;br&gt;
_Grunning：值（2）在执行用户代码，已经不在运行队列中，分配了M和P;&lt;br&gt;
_Gsyscall： 值（3）当前goroutine正在执行系统调用，已经不再运行队列中，分配了M;&lt;br&gt;
_Gwaiting： 值（4） 在运行时被阻塞，并没有执行用户代码，此刻的goroutine会被记录到某处（例如channel等待队列）&lt;br&gt;
_Gmoribund_unused: 值（5） 当前并未使用，但是已经在gdb中进行了硬编码；&lt;br&gt;
_Gdead： 值（6） 当前goroutine没有被使用，可能刚刚退出或者刚刚被初始化，并没有执行用户代码；&lt;br&gt;
_Genqueue_unused： 值（7） 当前并未使用；&lt;br&gt;
_Gcopystack：值（8）正在复制堆栈，并未执行用户代码，也没有在运行队列中； &lt;br&gt;
状态转换图(引自 &lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;goroutine调度&lt;/a&gt;)如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;                                                     +------------+
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                                      ready           |            |
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;                                  +------------------ |  _Gwaiting |
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;                                  |                   |            |
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;                                  |                   +------------+
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;                                  |                         ^ park_m
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                                  V                         | 
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;  +------------+            +------------+  execute   +------------+            +------------+    
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;  |            |  newproc   |            | ---------&amp;gt; |            |   goexit   |            |
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;  |  _Gidle    | ---------&amp;gt; | _Grunnable |  yield     | _Grunning  | ---------&amp;gt; |   _Gdead   |      
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;  |            |            |            | &amp;lt;--------- |            |            |            |
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;  +------------+            +-----^------+            +------------+            +------------+
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;                                  |         entersyscall |      ^ 
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;                                  |                      V      | existsyscall
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;                                  |                   +------------+
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;                                  |   existsyscall    |            |
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;                                  +------------------ |  _Gsyscall |
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;                                                      |            |
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;                                                      +------------+
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;p的状态&#34;&gt;P的状态&lt;/h3&gt;
&lt;p&gt;_Pidle: 空闲状态，未与M绑定&lt;br&gt;
_Prunning: 正在运行，已经与M绑定,M 正在执行P中G；&lt;br&gt;
_Psyscall: 正在执行的G处于系统调用中；&lt;br&gt;
_Pgcstop： runtime正在gc;&lt;br&gt;
_Pdead: 当前P已经不再使用；&lt;/p&gt;
&lt;p&gt;状态转换图(引自 &lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;goroutine调度&lt;/a&gt;)如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;                                            acquirep(p)        
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;                          不需要使用的P       P和M绑定的时候       进入系统调用       procresize()
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;new(p)  -----+        +---------------+     +-----------+     +------------+    +----------+
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;            |         |               |     |           |     |            |    |          |
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;            |   +------------+    +---v--------+    +---v--------+    +----v-------+    +--v---------+
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;            +--&amp;gt;|  _Pgcstop  |    |    _Pidle  |    |  _Prunning |    |  _Psyscall |    |   _Pdead   |
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;                +------^-----+    +--------^---+    +--------^---+    +------------+    +------------+
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;                       |            |     |            |     |            |
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;                       +------------+     +------------+     +------------+
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;                           GC结束            releasep()        退出系统调用
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;                                            P和M解绑  
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;抢占&#34;&gt;抢占&lt;/h3&gt;
&lt;p&gt;在golang程序启动时，会创建一个M（并没有关联P）来执行监控函数即sysmon,该函数就是用来完成抢占的；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该函数每次执行之间都会休眠一定的时间，休眠时间计算规则与每次是否抢占成功有关系：&lt;br&gt;
1.1 如果连续未抢占成功的次数小于等于50，则每次休眠20us;&lt;br&gt;
1.2 如果连续未抢占成功的次数大于50，则每次休眠次数翻倍；&lt;br&gt;
1.3 最大休眠时间不得超过10ms;&lt;/li&gt;
&lt;li&gt;遍历所有的P，查看P的状态：&lt;br&gt;
2.1 如果状态为_Psyscall(处于系统调用中)且执行时间已经超过了一个sysmon时间（最少20us）,则进行抢占；&lt;br&gt;
2.2 如果状态为_Prunning且执行时间已经超过了forcePreemptNS(10ms),则进行抢占；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;阻塞唤醒&#34;&gt;阻塞/唤醒&lt;/h3&gt;
&lt;p&gt;channel阻塞...&lt;br&gt;
系统阻塞...&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://studygolang.com/articles/20991&#34;&gt;https://studygolang.com/articles/20991&lt;/a&gt;
&lt;a href=&#34;https://studygolang.com/articles/11627&#34;&gt;https://studygolang.com/articles/11627&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/Oos-aW1_khTO084v0jPlIA&#34;&gt;https://mp.weixin.qq.com/s/Oos-aW1_khTO084v0jPlIA&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://blog.csdn.net/u010853261/article/details/84790392&#34;&gt;https://blog.csdn.net/u010853261/article/details/84790392&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://reading.developerlearning.cn/reading/12-2018-08-02-goroutine-gpm/&#34;&gt;go夜读 golang 调度&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
