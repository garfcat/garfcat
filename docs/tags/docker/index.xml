<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 有趣</title>
    <link>https://www.geekgame.site/tags/docker/</link>
    <description>Recent content in Docker on 有趣</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Mon, 29 Jan 2024 14:20:46 +0800</lastBuildDate>
    <atom:link href="https://www.geekgame.site/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker 容器日志过大问题</title>
      <link>https://www.geekgame.site/post/container/docker/log/</link>
      <pubDate>Mon, 29 Jan 2024 14:20:46 +0800</pubDate>
      <guid>https://www.geekgame.site/post/container/docker/log/</guid>
      <description>&lt;h2 id=&#34;docker-日志文件存放哪些日志&#34;&gt;docker 日志文件存放哪些日志&lt;/h2&gt;&#xA;&lt;p&gt;Docker容器的标准输出（stdout）和标准错误输出（stderr）被发送到容器的日志驱动程序，这些日志可以通过 docker logs 命令来访问。默认情况下，Docker将这些日志存储在宿主机上的 /var/lib/docker/containers/&lt;container-id&gt;/ 目录中，每个容器都有一个单独的目录。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何清理-docker-日志文件&#34;&gt;如何清理 docker 日志文件&lt;/h2&gt;&#xA;&lt;p&gt;清理Docker日志文件的方法通常包括手动清理以及使用工具自动清理；&lt;/p&gt;&#xA;&lt;h3 id=&#34;业务控制&#34;&gt;业务控制&lt;/h3&gt;&#xA;&lt;p&gt;减少业务的输出，可以控制日志量，但这并不是一个好的方法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;临时清理&#34;&gt;临时清理&lt;/h3&gt;&#xA;&lt;p&gt;可以通过以下命令临时清理，但这只是临时的方法，不能根治。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;logs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;find /var/lib/docker/containers/ -name *-json.log*&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; log in &lt;span class=&#34;nv&#34;&gt;$logs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;clean logs : &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cat /dev/null &amp;gt; &lt;span class=&#34;nv&#34;&gt;$log&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>一文读懂iptables/netfilter附带实战</title>
      <link>https://www.geekgame.site/post/linux/iptables/</link>
      <pubDate>Thu, 13 Oct 2022 14:14:13 +0800</pubDate>
      <guid>https://www.geekgame.site/post/linux/iptables/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;iptables 是一个命令行工具，用来配置包过滤的规则的，而真正实现这些规则的程序位于内核层，叫做 netfilter, 可以讲iptables理解为netfilter的客户端，iptables 与 netfilter 共同组成了包过滤软件。&#xA;平常工作交流中 iptables 也经常代指该内核级防火墙，iptables 用于 ipv4, 相应的 ip6tables 用于 IPv6。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概念介绍&#34;&gt;概念介绍&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;iptables转发过程&#34; src=&#34;https://www.geekgame.site/iptables/iptables.png&#34;&gt;&lt;br&gt;&#xA;（&lt;a href=&#34;https://wiki.archlinux.org/title/iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&#34;&gt;图片引用&lt;/a&gt;）&lt;/p&gt;&#xA;&lt;h3 id=&#34;hook&#34;&gt;hook&lt;/h3&gt;&#xA;&lt;p&gt;iptables 在内核是对数据包做修改、转发、丢弃等操作的，而这些操作都是在一个个 hook 上完成的，hook 就是注册数据包处理函数的地方。hook点都是预定义好的，一共划分了五个hook点，分别为:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NF_IP_PRE_ROUTING: 接收到的包进入协议栈后由该hook上注册的函数来处理，这是在查询路由之前;&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_LOCAL_IN: 查询路由后判断数据包是发往本机的，则首先进入该hook点，由该hook点上注册的函数来处理;&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_FORWARD: 查询路由后判断数据包是不是本机的，则进入该hook点，由该hook点上注册的函数来处理;&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_LOCAL_OUT: 本机发出的数据包首先进入该hook点，由该hook点上注册的函数来处理;&lt;/li&gt;&#xA;&lt;li&gt;NF_IP_POST_ROUTING: 数据包在发出本机之前，路由判断之后， 进入该hook点，由该hook点上注册的函数来处理;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;表链规则&#34;&gt;表、链、规则&lt;/h3&gt;&#xA;&lt;p&gt;iptables 是由表(table)来组织的，而表又是由链(chain) 组成，链中包含了一个或者多个规则(rule)，规则既是对数据包处理的具体定义，所以总体来看&#xA;iptables -&amp;gt; table -&amp;gt; chain -&amp;gt; rule。&lt;/p&gt;&#xA;&lt;h4 id=&#34;表&#34;&gt;表&lt;/h4&gt;&#xA;&lt;p&gt;iptables 一共有五个table,分别为：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;raw 用于配置数据包，提供一个让数据包不被系统跟踪的机制;&lt;/li&gt;&#xA;&lt;li&gt;filter 判断是否允许一个包通过;&lt;/li&gt;&#xA;&lt;li&gt;nat 用于 网络地址转换（例如：端口转发）;&lt;/li&gt;&#xA;&lt;li&gt;mangle 修改包的 IP 头，例如TTL，增加或减少包可以经过的跳数;&lt;/li&gt;&#xA;&lt;li&gt;security 用于 强制访问控制 网络规则;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;链&#34;&gt;链&lt;/h4&gt;&#xA;&lt;p&gt;链中包含了具体的规则，按照顺序进行匹配,内置了五个chain 与 hook 一一对应:&lt;/p&gt;</description>
    </item>
    <item>
      <title>DOCKER 容器访问不通问题定位</title>
      <link>https://www.geekgame.site/post/container/docker/network_can_not_access/</link>
      <pubDate>Thu, 13 Jan 2022 13:44:25 +0800</pubDate>
      <guid>https://www.geekgame.site/post/container/docker/network_can_not_access/</guid>
      <description>&lt;h2 id=&#34;现象&#34;&gt;现象&lt;/h2&gt;&#xA;&lt;p&gt;最近有一台设备上部署的容器服务无法从宿主机之外的节点进行访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;&#xA;&lt;p&gt;要定位该问题首先要确认以下几个事情：&lt;br&gt;&#xA;1. 服务是否正常启动&lt;br&gt;&#xA;2. 确认容器的网络模式&lt;br&gt;&#xA;3. 容器如何与外面的节点通讯&lt;br&gt;&#xA;4. 数据包在设备上实际流转&lt;/p&gt;&#xA;&lt;h2 id=&#34;定位过程&#34;&gt;定位过程&lt;/h2&gt;&#xA;&lt;h3 id=&#34;确认服务是否正常&#34;&gt;确认服务是否正常&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;查看容器运行是否正常:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;CONTAINER ID        IMAGE                                                                          COMMAND                  CREATED             STATUS              PORTS                    NAMES&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;cfde73945bf6        ***:1.0.7   &lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh -c /opt/boo…&amp;#34;&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; hours ago        Up &lt;span class=&#34;m&#34;&gt;27&lt;/span&gt; hours         0.0.0.0:7788-&amp;gt;7788/tcp   ***&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
