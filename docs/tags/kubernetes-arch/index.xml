<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes arch on 有趣</title>
    <link>https://www.geekgame.site/tags/kubernetes-arch/</link>
    <description>Recent content in kubernetes arch on 有趣</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 31 Oct 2019 15:26:32 +0800</lastBuildDate><atom:link href="https://www.geekgame.site/tags/kubernetes-arch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubernetes 架构</title>
      <link>https://www.geekgame.site/post/k8s/k8s/</link>
      <pubDate>Thu, 31 Oct 2019 15:26:32 +0800</pubDate>
      
      <guid>https://www.geekgame.site/post/k8s/k8s/</guid>
      <description>
        
          &lt;h1 id=&#34;什么是-kubernetes&#34;&gt;什么是 Kubernetes&lt;/h1&gt;
&lt;p&gt;Kubernetes(简称K8s) 是由 Google 在2014年开源的容器编排与调度管理框架，主要是为用户提供一个具有普遍意义的容器编排工具。该项目是Google内部大规模集群管理系统-Borg的一个开源版本，目前是由CNCF(Cloud Native Computing Foundation)托管项目。
Kubernetes 的主要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可扩展：Kubernetes 是高度可配置且可扩展的。&lt;/li&gt;
&lt;li&gt;可移植：Kubernetes 不限于特定平台，可以在各种公共或者私有云平台上运行。&lt;/li&gt;
&lt;li&gt;自动化：Kubernetes 是一个高度自动化的平台：可自动部署/回滚、自我修复、自动扩缩容。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;kubernetes-架构&#34;&gt;Kubernetes 架构&lt;/h1&gt;
&lt;p&gt;K8s 遵循服务器/客户端(C/S)架构,分为两部分master和node，其中master是服务端，是控制节点主要控制和管理整个K8s集群;node是客户端,是工作节点，主要处理来自于master的任务。K8s可以设置多master来实现高可用，但是默认情况下单个master 就可以完成所有的工作。&lt;br&gt;
master包含的组件有：kube-apiserver, etcd, kube-controller-manager, kube-scheduler, cloud-controller-manager; &lt;br&gt;
node 包含的组件有: kubelet, kube-proxy;&lt;br&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/Kubernetes-101-Architecture-Diagram-768x555.jpeg&#34; alt=&#34;带有两个Worker nodes和一个master的K8s架构图&#34;&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;master-组件&#34;&gt;master 组件&lt;/h2&gt;
&lt;p&gt;kube-apiserver: 提供集群HTTP REST API, 是集群控制的唯一入口,提供访问控制、注册、信息存储功能, 同时也是集群内部模块之间数据交换的枢纽。 &lt;br&gt;
etcd:  兼具一致性和高可用性的键值数据库,保存 K8s 所有集群数据;&lt;br&gt;
kube-scheduler:  对K8s中的Pod资源进行监控调度，为Pod选择合适的工作节点； &lt;br&gt;
kube-controller-manager: K8s实现自动化的关键组件，是集群中所有资源的自动化控制中心；&lt;br&gt;
cloud-controller-manager: 云控制器管理器是指嵌入特定云的控制逻辑的控制平面组件,使得 K8s 可以直接利用云平台实现持久化卷、负载均衡、网络路由、DNS 解析以及横向扩展等功能。&lt;/p&gt;
&lt;h2 id=&#34;node-组件&#34;&gt;node 组件&lt;/h2&gt;
&lt;p&gt;kubelet: 负责与master节点通信，处理master下发的任务，管理节点上容器的创建、停止与删除等; &lt;br&gt;
kube-proxy: 负责K8s集群服务的通信以及负载均衡；&lt;/p&gt;
&lt;h1 id=&#34;数据流转&#34;&gt;数据流转&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/garfcat/garfcat/master/static/k8s/k8s_data.png&#34; alt=&#34;K8s 数据流转&#34;&gt;
我们以 ReplicaSet 为例，讲述一下K8s的数据流转：&lt;br&gt;
0. 在集群组件一启动 kube-scheduler，kube-controller-manager，kubelet就会通过list-watch机制监听自己关心的事件；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;API作为集群入口，接收命令请求；&lt;/li&gt;
&lt;li&gt;Deployment 控制器通过 watch 获取到 Deployment 的创建事件;&lt;/li&gt;
&lt;li&gt;Deployment 控制器创建 ReplicaSet 资源;&lt;/li&gt;
&lt;li&gt;ReplicaSet 控制器通过 watch 获取到 ReplicaSet 的创建事件;&lt;/li&gt;
&lt;li&gt;ReplicaSet 控制器创建 POD 资源；&lt;/li&gt;
&lt;li&gt;Scheduler 通过 watch 获取 Pod 创建事件以及获取未绑定Node的Pod；&lt;/li&gt;
&lt;li&gt;Scheduler 通过调度算法为 Pod 选择合适的Node；&lt;/li&gt;
&lt;li&gt;kubelet 通过 watch 获取部署在当前Node的 Pod;&lt;/li&gt;
&lt;li&gt;kubelet 通过 CRI 通知container runtime 创建 Pod；&lt;/li&gt;
&lt;li&gt;container runtime 成功创建Pod；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;观察pod创建过程相关事件&#34;&gt;观察POD创建过程相关事件&lt;/h2&gt;
&lt;p&gt;我们可以通过kubectl get events --watch 来观察POD创建过程所产生的事件。使用watch 选项可以监听整个过程。
以下是创建nginx的过程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;➜  ~ kubectl get events --watch       
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;LAST SEEN   TYPE     REASON    OBJECT                                  MESSAGE
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;0s          Normal   ScalingReplicaSet   deployment/nginx                        Scaled up replica &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; nginx-6799fc88d8 to &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;0s          Normal   SuccessfulCreate    replicaset/nginx-6799fc88d8             Created pod: nginx-6799fc88d8-dlvsf
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;0s          Normal   SuccessfulCreate    replicaset/nginx-6799fc88d8             Created pod: nginx-6799fc88d8-b7868
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;0s          Normal   Scheduled           pod/nginx-6799fc88d8-dlvsf              Successfully assigned default/nginx-6799fc88d8-dlvsf to k8s-node1
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;0s          Normal   Scheduled           pod/nginx-6799fc88d8-b7868              Successfully assigned default/nginx-6799fc88d8-b7868 to k8s-node1
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;0s          Normal   Pulling             pod/nginx-6799fc88d8-b7868              Pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;0s          Normal   Pulling             pod/nginx-6799fc88d8-dlvsf              Pulling image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;0s          Normal   Pulled              pod/nginx-6799fc88d8-b7868              Successfully pulled image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt; in 14.134421496s
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;0s          Normal   Created             pod/nginx-6799fc88d8-b7868              Created container nginx
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;0s          Normal   Started             pod/nginx-6799fc88d8-b7868              Started container nginx
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;0s          Normal   Pulled              pod/nginx-6799fc88d8-dlvsf              Successfully pulled image &lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt; in 19.163499736s
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;0s          Normal   Created             pod/nginx-6799fc88d8-dlvsf              Created container nginx
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;0s          Normal   Started             pod/nginx-6799fc88d8-dlvsf              Started container nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上就是关于K8s架构以及数据流转的介绍。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aquasec.com/cloud-native-academy/kubernetes-101/kubernetes-architecture/&#34;&gt;Kubernetes Architecture&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://x-team.com/blog/introduction-kubernetes-architecture/&#34;&gt;INTRODUCTION TO KUBERNETES ARCHITECTURE&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://kubernetes.io/zh/docs/concepts/services-networking/service/&#34;&gt;服务&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://dockone.io/article/4884&#34;&gt;Kubernetes的三种外部访问方式：NodePort、LoadBalancer 和 Ingress&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;&#34;&gt;极客时间&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
